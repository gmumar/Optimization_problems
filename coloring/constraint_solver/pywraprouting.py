# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywraprouting', [dirname(__file__)])
        except ImportError:
            import _pywraprouting
            return _pywraprouting
        if fp is not None:
            try:
                _mod = imp.load_module('_pywraprouting', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywraprouting = swig_import_helper()
    del swig_import_helper
else:
    import _pywraprouting
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pywraprouting.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pywraprouting.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pywraprouting.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pywraprouting.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pywraprouting.SwigPyIterator_equal(self, *args)
    def copy(self): return _pywraprouting.SwigPyIterator_copy(self)
    def next(self): return _pywraprouting.SwigPyIterator_next(self)
    def __next__(self): return _pywraprouting.SwigPyIterator___next__(self)
    def previous(self): return _pywraprouting.SwigPyIterator_previous(self)
    def advance(self, *args): return _pywraprouting.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pywraprouting.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pywraprouting.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pywraprouting.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pywraprouting.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pywraprouting.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pywraprouting.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pywraprouting.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntTupleSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntTupleSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntTupleSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_IntTupleSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_IntTupleSet
    __del__ = lambda self : None;
    def Clear(self): return _pywraprouting.IntTupleSet_Clear(self)
    def Insert(self, *args): return _pywraprouting.IntTupleSet_Insert(self, *args)
    def Insert2(self, *args): return _pywraprouting.IntTupleSet_Insert2(self, *args)
    def Insert3(self, *args): return _pywraprouting.IntTupleSet_Insert3(self, *args)
    def Insert4(self, *args): return _pywraprouting.IntTupleSet_Insert4(self, *args)
    def InsertAll(self, *args): return _pywraprouting.IntTupleSet_InsertAll(self, *args)
    def Contains(self, *args): return _pywraprouting.IntTupleSet_Contains(self, *args)
    def NumTuples(self): return _pywraprouting.IntTupleSet_NumTuples(self)
    def Value(self, *args): return _pywraprouting.IntTupleSet_Value(self, *args)
    def Arity(self): return _pywraprouting.IntTupleSet_Arity(self)
    def RawData(self): return _pywraprouting.IntTupleSet_RawData(self)
    def NumDifferentValuesInColumn(self, *args): return _pywraprouting.IntTupleSet_NumDifferentValuesInColumn(self, *args)
    def SortedByColumn(self, *args): return _pywraprouting.IntTupleSet_SortedByColumn(self, *args)
    def SortedLexicographically(self): return _pywraprouting.IntTupleSet_SortedLexicographically(self)
IntTupleSet_swigregister = _pywraprouting.IntTupleSet_swigregister
IntTupleSet_swigregister(IntTupleSet)

import gflags
FLAGS=gflags.FLAGS
gflags.DEFINE_boolean('cp_trace_propagation', False,
                      'trace all propagation events.')
gflags.DEFINE_boolean('cp_print_model', False,
                      'prints the model before solving it.')
gflags.DEFINE_boolean('cp_model_stats', False,
                      'displays model statistics before solving it.')
gflags.DEFINE_string('cp_export_file', '',
                     'exports model to file using CPModelProto.')
gflags.DEFINE_boolean('cp_no_solve', False,
                      'force failures at the beginning of a search.')
gflags.DEFINE_string('cp_profile_file', '',
                     'exports profiling overview to file.')

class PyDecisionBuilder(object):
  def NextWrapper(self, solver):
    result = None
    try:
      result = self.Next(solver)
    except Exception:
      return solver.FailDecision()
    return result

class SolverParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolverParameters, name)
    __repr__ = _swig_repr
    NO_COMPRESSION = _pywraprouting.SolverParameters_NO_COMPRESSION
    COMPRESS_WITH_ZLIB = _pywraprouting.SolverParameters_COMPRESS_WITH_ZLIB
    NO_PROFILING = _pywraprouting.SolverParameters_NO_PROFILING
    NORMAL_PROFILING = _pywraprouting.SolverParameters_NORMAL_PROFILING
    NO_TRACE = _pywraprouting.SolverParameters_NO_TRACE
    NORMAL_TRACE = _pywraprouting.SolverParameters_NORMAL_TRACE
    def __init__(self): 
        this = _pywraprouting.new_SolverParameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["compress_trail"] = _pywraprouting.SolverParameters_compress_trail_set
    __swig_getmethods__["compress_trail"] = _pywraprouting.SolverParameters_compress_trail_get
    if _newclass:compress_trail = _swig_property(_pywraprouting.SolverParameters_compress_trail_get, _pywraprouting.SolverParameters_compress_trail_set)
    __swig_setmethods__["trail_block_size"] = _pywraprouting.SolverParameters_trail_block_size_set
    __swig_getmethods__["trail_block_size"] = _pywraprouting.SolverParameters_trail_block_size_get
    if _newclass:trail_block_size = _swig_property(_pywraprouting.SolverParameters_trail_block_size_get, _pywraprouting.SolverParameters_trail_block_size_set)
    __swig_setmethods__["array_split_size"] = _pywraprouting.SolverParameters_array_split_size_set
    __swig_getmethods__["array_split_size"] = _pywraprouting.SolverParameters_array_split_size_get
    if _newclass:array_split_size = _swig_property(_pywraprouting.SolverParameters_array_split_size_get, _pywraprouting.SolverParameters_array_split_size_set)
    __swig_setmethods__["store_names"] = _pywraprouting.SolverParameters_store_names_set
    __swig_getmethods__["store_names"] = _pywraprouting.SolverParameters_store_names_get
    if _newclass:store_names = _swig_property(_pywraprouting.SolverParameters_store_names_get, _pywraprouting.SolverParameters_store_names_set)
    __swig_setmethods__["profile_level"] = _pywraprouting.SolverParameters_profile_level_set
    __swig_getmethods__["profile_level"] = _pywraprouting.SolverParameters_profile_level_get
    if _newclass:profile_level = _swig_property(_pywraprouting.SolverParameters_profile_level_get, _pywraprouting.SolverParameters_profile_level_set)
    __swig_setmethods__["trace_level"] = _pywraprouting.SolverParameters_trace_level_set
    __swig_getmethods__["trace_level"] = _pywraprouting.SolverParameters_trace_level_get
    if _newclass:trace_level = _swig_property(_pywraprouting.SolverParameters_trace_level_get, _pywraprouting.SolverParameters_trace_level_set)
    __swig_setmethods__["name_all_variables"] = _pywraprouting.SolverParameters_name_all_variables_set
    __swig_getmethods__["name_all_variables"] = _pywraprouting.SolverParameters_name_all_variables_get
    if _newclass:name_all_variables = _swig_property(_pywraprouting.SolverParameters_name_all_variables_get, _pywraprouting.SolverParameters_name_all_variables_set)
    __swig_destroy__ = _pywraprouting.delete_SolverParameters
    __del__ = lambda self : None;
SolverParameters_swigregister = _pywraprouting.SolverParameters_swigregister
SolverParameters_swigregister(SolverParameters)
cvar = _pywraprouting.cvar
SolverParameters.kDefaultTrailCompression = _pywraprouting.cvar.SolverParameters_kDefaultTrailCompression
SolverParameters.kDefaultTrailBlockSize = _pywraprouting.cvar.SolverParameters_kDefaultTrailBlockSize
SolverParameters.kDefaultArraySplitSize = _pywraprouting.cvar.SolverParameters_kDefaultArraySplitSize
SolverParameters.kDefaultNameStoring = _pywraprouting.cvar.SolverParameters_kDefaultNameStoring
SolverParameters.kDefaultProfileLevel = _pywraprouting.cvar.SolverParameters_kDefaultProfileLevel
SolverParameters.kDefaultTraceLevel = _pywraprouting.cvar.SolverParameters_kDefaultTraceLevel
SolverParameters.kDefaultNameAllVariables = _pywraprouting.cvar.SolverParameters_kDefaultNameAllVariables

class DefaultPhaseParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultPhaseParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultPhaseParameters, name)
    __repr__ = _swig_repr
    CHOOSE_MAX_SUM_IMPACT = _pywraprouting.DefaultPhaseParameters_CHOOSE_MAX_SUM_IMPACT
    CHOOSE_MAX_AVERAGE_IMPACT = _pywraprouting.DefaultPhaseParameters_CHOOSE_MAX_AVERAGE_IMPACT
    CHOOSE_MAX_VALUE_IMPACT = _pywraprouting.DefaultPhaseParameters_CHOOSE_MAX_VALUE_IMPACT
    SELECT_MIN_IMPACT = _pywraprouting.DefaultPhaseParameters_SELECT_MIN_IMPACT
    SELECT_MAX_IMPACT = _pywraprouting.DefaultPhaseParameters_SELECT_MAX_IMPACT
    NONE = _pywraprouting.DefaultPhaseParameters_NONE
    NORMAL = _pywraprouting.DefaultPhaseParameters_NORMAL
    VERBOSE = _pywraprouting.DefaultPhaseParameters_VERBOSE
    CHOOSE_FIRST_UNBOUND_ASSIGN_MIN = _pywraprouting.DefaultPhaseParameters_CHOOSE_FIRST_UNBOUND_ASSIGN_MIN
    CHOOSE_MIN_SIZE_ASSIGN_MIN = _pywraprouting.DefaultPhaseParameters_CHOOSE_MIN_SIZE_ASSIGN_MIN
    IMPACT_BASED_SEARCH = _pywraprouting.DefaultPhaseParameters_IMPACT_BASED_SEARCH
    CHOOSE_RANDOM_ASSIGN_MIN = _pywraprouting.DefaultPhaseParameters_CHOOSE_RANDOM_ASSIGN_MIN
    CHOOSE_RANDOM_ASSIGN_MAX = _pywraprouting.DefaultPhaseParameters_CHOOSE_RANDOM_ASSIGN_MAX
    def __init__(self): 
        this = _pywraprouting.new_DefaultPhaseParameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["var_selection_schema"] = _pywraprouting.DefaultPhaseParameters_var_selection_schema_set
    __swig_getmethods__["var_selection_schema"] = _pywraprouting.DefaultPhaseParameters_var_selection_schema_get
    if _newclass:var_selection_schema = _swig_property(_pywraprouting.DefaultPhaseParameters_var_selection_schema_get, _pywraprouting.DefaultPhaseParameters_var_selection_schema_set)
    __swig_setmethods__["value_selection_schema"] = _pywraprouting.DefaultPhaseParameters_value_selection_schema_set
    __swig_getmethods__["value_selection_schema"] = _pywraprouting.DefaultPhaseParameters_value_selection_schema_get
    if _newclass:value_selection_schema = _swig_property(_pywraprouting.DefaultPhaseParameters_value_selection_schema_get, _pywraprouting.DefaultPhaseParameters_value_selection_schema_set)
    __swig_setmethods__["initialization_splits"] = _pywraprouting.DefaultPhaseParameters_initialization_splits_set
    __swig_getmethods__["initialization_splits"] = _pywraprouting.DefaultPhaseParameters_initialization_splits_get
    if _newclass:initialization_splits = _swig_property(_pywraprouting.DefaultPhaseParameters_initialization_splits_get, _pywraprouting.DefaultPhaseParameters_initialization_splits_set)
    __swig_setmethods__["run_all_heuristics"] = _pywraprouting.DefaultPhaseParameters_run_all_heuristics_set
    __swig_getmethods__["run_all_heuristics"] = _pywraprouting.DefaultPhaseParameters_run_all_heuristics_get
    if _newclass:run_all_heuristics = _swig_property(_pywraprouting.DefaultPhaseParameters_run_all_heuristics_get, _pywraprouting.DefaultPhaseParameters_run_all_heuristics_set)
    __swig_setmethods__["heuristic_period"] = _pywraprouting.DefaultPhaseParameters_heuristic_period_set
    __swig_getmethods__["heuristic_period"] = _pywraprouting.DefaultPhaseParameters_heuristic_period_get
    if _newclass:heuristic_period = _swig_property(_pywraprouting.DefaultPhaseParameters_heuristic_period_get, _pywraprouting.DefaultPhaseParameters_heuristic_period_set)
    __swig_setmethods__["heuristic_num_failures_limit"] = _pywraprouting.DefaultPhaseParameters_heuristic_num_failures_limit_set
    __swig_getmethods__["heuristic_num_failures_limit"] = _pywraprouting.DefaultPhaseParameters_heuristic_num_failures_limit_get
    if _newclass:heuristic_num_failures_limit = _swig_property(_pywraprouting.DefaultPhaseParameters_heuristic_num_failures_limit_get, _pywraprouting.DefaultPhaseParameters_heuristic_num_failures_limit_set)
    __swig_setmethods__["persistent_impact"] = _pywraprouting.DefaultPhaseParameters_persistent_impact_set
    __swig_getmethods__["persistent_impact"] = _pywraprouting.DefaultPhaseParameters_persistent_impact_get
    if _newclass:persistent_impact = _swig_property(_pywraprouting.DefaultPhaseParameters_persistent_impact_get, _pywraprouting.DefaultPhaseParameters_persistent_impact_set)
    __swig_setmethods__["random_seed"] = _pywraprouting.DefaultPhaseParameters_random_seed_set
    __swig_getmethods__["random_seed"] = _pywraprouting.DefaultPhaseParameters_random_seed_get
    if _newclass:random_seed = _swig_property(_pywraprouting.DefaultPhaseParameters_random_seed_get, _pywraprouting.DefaultPhaseParameters_random_seed_set)
    __swig_setmethods__["restart_log_size"] = _pywraprouting.DefaultPhaseParameters_restart_log_size_set
    __swig_getmethods__["restart_log_size"] = _pywraprouting.DefaultPhaseParameters_restart_log_size_get
    if _newclass:restart_log_size = _swig_property(_pywraprouting.DefaultPhaseParameters_restart_log_size_get, _pywraprouting.DefaultPhaseParameters_restart_log_size_set)
    __swig_setmethods__["display_level"] = _pywraprouting.DefaultPhaseParameters_display_level_set
    __swig_getmethods__["display_level"] = _pywraprouting.DefaultPhaseParameters_display_level_get
    if _newclass:display_level = _swig_property(_pywraprouting.DefaultPhaseParameters_display_level_get, _pywraprouting.DefaultPhaseParameters_display_level_set)
    __swig_setmethods__["use_no_goods"] = _pywraprouting.DefaultPhaseParameters_use_no_goods_set
    __swig_getmethods__["use_no_goods"] = _pywraprouting.DefaultPhaseParameters_use_no_goods_get
    if _newclass:use_no_goods = _swig_property(_pywraprouting.DefaultPhaseParameters_use_no_goods_get, _pywraprouting.DefaultPhaseParameters_use_no_goods_set)
    __swig_setmethods__["search_strategy"] = _pywraprouting.DefaultPhaseParameters_search_strategy_set
    __swig_getmethods__["search_strategy"] = _pywraprouting.DefaultPhaseParameters_search_strategy_get
    if _newclass:search_strategy = _swig_property(_pywraprouting.DefaultPhaseParameters_search_strategy_get, _pywraprouting.DefaultPhaseParameters_search_strategy_set)
    __swig_destroy__ = _pywraprouting.delete_DefaultPhaseParameters
    __del__ = lambda self : None;
DefaultPhaseParameters_swigregister = _pywraprouting.DefaultPhaseParameters_swigregister
DefaultPhaseParameters_swigregister(DefaultPhaseParameters)
DefaultPhaseParameters.kDefaultNumberOfSplits = _pywraprouting.cvar.DefaultPhaseParameters_kDefaultNumberOfSplits
DefaultPhaseParameters.kDefaultHeuristicPeriod = _pywraprouting.cvar.DefaultPhaseParameters_kDefaultHeuristicPeriod
DefaultPhaseParameters.kDefaultHeuristicNumFailuresLimit = _pywraprouting.cvar.DefaultPhaseParameters_kDefaultHeuristicNumFailuresLimit
DefaultPhaseParameters.kDefaultSeed = _pywraprouting.cvar.DefaultPhaseParameters_kDefaultSeed
DefaultPhaseParameters.kDefaultRestartLogSize = _pywraprouting.cvar.DefaultPhaseParameters_kDefaultRestartLogSize
DefaultPhaseParameters.kDefaultUseNoGoods = _pywraprouting.cvar.DefaultPhaseParameters_kDefaultUseNoGoods
DefaultPhaseParameters.kDefaultSearchStrategy = _pywraprouting.cvar.DefaultPhaseParameters_kDefaultSearchStrategy

class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    __repr__ = _swig_repr
    kNumPriorities = _pywraprouting.Solver_kNumPriorities
    INT_VAR_DEFAULT = _pywraprouting.Solver_INT_VAR_DEFAULT
    INT_VAR_SIMPLE = _pywraprouting.Solver_INT_VAR_SIMPLE
    CHOOSE_FIRST_UNBOUND = _pywraprouting.Solver_CHOOSE_FIRST_UNBOUND
    CHOOSE_RANDOM = _pywraprouting.Solver_CHOOSE_RANDOM
    CHOOSE_MIN_SIZE_LOWEST_MIN = _pywraprouting.Solver_CHOOSE_MIN_SIZE_LOWEST_MIN
    CHOOSE_MIN_SIZE_HIGHEST_MIN = _pywraprouting.Solver_CHOOSE_MIN_SIZE_HIGHEST_MIN
    CHOOSE_MIN_SIZE_LOWEST_MAX = _pywraprouting.Solver_CHOOSE_MIN_SIZE_LOWEST_MAX
    CHOOSE_MIN_SIZE_HIGHEST_MAX = _pywraprouting.Solver_CHOOSE_MIN_SIZE_HIGHEST_MAX
    CHOOSE_LOWEST_MIN = _pywraprouting.Solver_CHOOSE_LOWEST_MIN
    CHOOSE_HIGHEST_MAX = _pywraprouting.Solver_CHOOSE_HIGHEST_MAX
    CHOOSE_MIN_SIZE = _pywraprouting.Solver_CHOOSE_MIN_SIZE
    CHOOSE_MAX_SIZE = _pywraprouting.Solver_CHOOSE_MAX_SIZE
    CHOOSE_MAX_REGRET = _pywraprouting.Solver_CHOOSE_MAX_REGRET
    CHOOSE_PATH = _pywraprouting.Solver_CHOOSE_PATH
    INT_VALUE_DEFAULT = _pywraprouting.Solver_INT_VALUE_DEFAULT
    INT_VALUE_SIMPLE = _pywraprouting.Solver_INT_VALUE_SIMPLE
    ASSIGN_MIN_VALUE = _pywraprouting.Solver_ASSIGN_MIN_VALUE
    ASSIGN_MAX_VALUE = _pywraprouting.Solver_ASSIGN_MAX_VALUE
    ASSIGN_RANDOM_VALUE = _pywraprouting.Solver_ASSIGN_RANDOM_VALUE
    ASSIGN_CENTER_VALUE = _pywraprouting.Solver_ASSIGN_CENTER_VALUE
    SPLIT_LOWER_HALF = _pywraprouting.Solver_SPLIT_LOWER_HALF
    SPLIT_UPPER_HALF = _pywraprouting.Solver_SPLIT_UPPER_HALF
    CHOOSE_STATIC_GLOBAL_BEST = _pywraprouting.Solver_CHOOSE_STATIC_GLOBAL_BEST
    CHOOSE_DYNAMIC_GLOBAL_BEST = _pywraprouting.Solver_CHOOSE_DYNAMIC_GLOBAL_BEST
    SEQUENCE_DEFAULT = _pywraprouting.Solver_SEQUENCE_DEFAULT
    SEQUENCE_SIMPLE = _pywraprouting.Solver_SEQUENCE_SIMPLE
    CHOOSE_MIN_SLACK_RANK_FORWARD = _pywraprouting.Solver_CHOOSE_MIN_SLACK_RANK_FORWARD
    CHOOSE_RANDOM_RANK_FORWARD = _pywraprouting.Solver_CHOOSE_RANDOM_RANK_FORWARD
    INTERVAL_DEFAULT = _pywraprouting.Solver_INTERVAL_DEFAULT
    INTERVAL_SIMPLE = _pywraprouting.Solver_INTERVAL_SIMPLE
    INTERVAL_SET_TIMES_FORWARD = _pywraprouting.Solver_INTERVAL_SET_TIMES_FORWARD
    TWOOPT = _pywraprouting.Solver_TWOOPT
    OROPT = _pywraprouting.Solver_OROPT
    RELOCATE = _pywraprouting.Solver_RELOCATE
    EXCHANGE = _pywraprouting.Solver_EXCHANGE
    CROSS = _pywraprouting.Solver_CROSS
    MAKEACTIVE = _pywraprouting.Solver_MAKEACTIVE
    MAKEINACTIVE = _pywraprouting.Solver_MAKEINACTIVE
    SWAPACTIVE = _pywraprouting.Solver_SWAPACTIVE
    EXTENDEDSWAPACTIVE = _pywraprouting.Solver_EXTENDEDSWAPACTIVE
    PATHLNS = _pywraprouting.Solver_PATHLNS
    UNACTIVELNS = _pywraprouting.Solver_UNACTIVELNS
    INCREMENT = _pywraprouting.Solver_INCREMENT
    DECREMENT = _pywraprouting.Solver_DECREMENT
    SIMPLELNS = _pywraprouting.Solver_SIMPLELNS
    LK = _pywraprouting.Solver_LK
    TSPOPT = _pywraprouting.Solver_TSPOPT
    TSPLNS = _pywraprouting.Solver_TSPLNS
    GE = _pywraprouting.Solver_GE
    LE = _pywraprouting.Solver_LE
    EQ = _pywraprouting.Solver_EQ
    SUM = _pywraprouting.Solver_SUM
    PROD = _pywraprouting.Solver_PROD
    MAX = _pywraprouting.Solver_MAX
    MIN = _pywraprouting.Solver_MIN
    DELAYED_PRIORITY = _pywraprouting.Solver_DELAYED_PRIORITY
    VAR_PRIORITY = _pywraprouting.Solver_VAR_PRIORITY
    NORMAL_PRIORITY = _pywraprouting.Solver_NORMAL_PRIORITY
    ENDS_AFTER_END = _pywraprouting.Solver_ENDS_AFTER_END
    ENDS_AFTER_START = _pywraprouting.Solver_ENDS_AFTER_START
    ENDS_AT_END = _pywraprouting.Solver_ENDS_AT_END
    ENDS_AT_START = _pywraprouting.Solver_ENDS_AT_START
    STARTS_AFTER_END = _pywraprouting.Solver_STARTS_AFTER_END
    STARTS_AFTER_START = _pywraprouting.Solver_STARTS_AFTER_START
    STARTS_AT_END = _pywraprouting.Solver_STARTS_AT_END
    STARTS_AT_START = _pywraprouting.Solver_STARTS_AT_START
    STAYS_IN_SYNC = _pywraprouting.Solver_STAYS_IN_SYNC
    ENDS_AFTER = _pywraprouting.Solver_ENDS_AFTER
    ENDS_AT = _pywraprouting.Solver_ENDS_AT
    ENDS_BEFORE = _pywraprouting.Solver_ENDS_BEFORE
    STARTS_AFTER = _pywraprouting.Solver_STARTS_AFTER
    STARTS_AT = _pywraprouting.Solver_STARTS_AT
    STARTS_BEFORE = _pywraprouting.Solver_STARTS_BEFORE
    CROSS_DATE = _pywraprouting.Solver_CROSS_DATE
    AVOID_DATE = _pywraprouting.Solver_AVOID_DATE
    NO_CHANGE = _pywraprouting.Solver_NO_CHANGE
    KEEP_LEFT = _pywraprouting.Solver_KEEP_LEFT
    KEEP_RIGHT = _pywraprouting.Solver_KEEP_RIGHT
    KILL_BOTH = _pywraprouting.Solver_KILL_BOTH
    SWITCH_BRANCHES = _pywraprouting.Solver_SWITCH_BRANCHES
    SENTINEL = _pywraprouting.Solver_SENTINEL
    SIMPLE_MARKER = _pywraprouting.Solver_SIMPLE_MARKER
    CHOICE_POINT = _pywraprouting.Solver_CHOICE_POINT
    REVERSIBLE_ACTION = _pywraprouting.Solver_REVERSIBLE_ACTION
    OUTSIDE_SEARCH = _pywraprouting.Solver_OUTSIDE_SEARCH
    IN_ROOT_NODE = _pywraprouting.Solver_IN_ROOT_NODE
    IN_SEARCH = _pywraprouting.Solver_IN_SEARCH
    AT_SOLUTION = _pywraprouting.Solver_AT_SOLUTION
    NO_MORE_SOLUTIONS = _pywraprouting.Solver_NO_MORE_SOLUTIONS
    PROBLEM_INFEASIBLE = _pywraprouting.Solver_PROBLEM_INFEASIBLE
    def __init__(self, *args): 
        this = _pywraprouting.new_Solver(*args)
        try: self.this.append(this)
        except: self.this = this
        Solver.SetPythonFlags(FLAGS.cp_trace_propagation,
                              FLAGS.cp_print_model,
                              FLAGS.cp_model_stats,
                              FLAGS.cp_export_file,
                              FLAGS.cp_no_solve,
                              FLAGS.cp_profile_file)



    __swig_destroy__ = _pywraprouting.delete_Solver
    __del__ = lambda self : None;
    def parameters(self): return _pywraprouting.Solver_parameters(self)
    def Add(self, *args): return _pywraprouting.Solver_Add(self, *args)
    def AddCastConstraint(self, *args): return _pywraprouting.Solver_AddCastConstraint(self, *args)
    def Solve(self, *args): return _pywraprouting.Solver_Solve(self, *args)
    def NewSearch(self, *args): return _pywraprouting.Solver_NewSearch(self, *args)
    def NextSolution(self): return _pywraprouting.Solver_NextSolution(self)
    def RestartSearch(self): return _pywraprouting.Solver_RestartSearch(self)
    def EndSearch(self): return _pywraprouting.Solver_EndSearch(self)
    def SolveAndCommit(self, *args): return _pywraprouting.Solver_SolveAndCommit(self, *args)
    def CheckAssignment(self, *args): return _pywraprouting.Solver_CheckAssignment(self, *args)
    def CheckConstraint(self, *args): return _pywraprouting.Solver_CheckConstraint(self, *args)
    def state(self): return _pywraprouting.Solver_state(self)
    def Fail(self): return _pywraprouting.Solver_Fail(self)
    def ExportModel(self, *args): return _pywraprouting.Solver_ExportModel(self, *args)
    def LoadModel(self, *args): return _pywraprouting.Solver_LoadModel(self, *args)
    __swig_getmethods__["UpgradeModel"] = lambda x: _pywraprouting.Solver_UpgradeModel
    if _newclass:UpgradeModel = staticmethod(_pywraprouting.Solver_UpgradeModel)
    def RegisterBuilder(self, *args): return _pywraprouting.Solver_RegisterBuilder(self, *args)
    def GetConstraintBuilder(self, *args): return _pywraprouting.Solver_GetConstraintBuilder(self, *args)
    def GetIntegerExpressionBuilder(self, *args): return _pywraprouting.Solver_GetIntegerExpressionBuilder(self, *args)
    def GetIntervalVariableBuilder(self, *args): return _pywraprouting.Solver_GetIntervalVariableBuilder(self, *args)
    def GetSequenceVariableBuilder(self, *args): return _pywraprouting.Solver_GetSequenceVariableBuilder(self, *args)
    def AddBacktrackAction(self, *args): return _pywraprouting.Solver_AddBacktrackAction(self, *args)
    __swig_getmethods__["MemoryUsage"] = lambda x: _pywraprouting.Solver_MemoryUsage
    if _newclass:MemoryUsage = staticmethod(_pywraprouting.Solver_MemoryUsage)
    def WallTime(self): return _pywraprouting.Solver_WallTime(self)
    def Branches(self): return _pywraprouting.Solver_Branches(self)
    def Solutions(self): return _pywraprouting.Solver_Solutions(self)
    def DemonRuns(self, *args): return _pywraprouting.Solver_DemonRuns(self, *args)
    def Failures(self): return _pywraprouting.Solver_Failures(self)
    def Neighbors(self): return _pywraprouting.Solver_Neighbors(self)
    def FilteredNeighbors(self): return _pywraprouting.Solver_FilteredNeighbors(self)
    def AcceptedNeighbors(self): return _pywraprouting.Solver_AcceptedNeighbors(self)
    def Stamp(self): return _pywraprouting.Solver_Stamp(self)
    def FailStamp(self): return _pywraprouting.Solver_FailStamp(self)
    def IntVar(self, *args): return _pywraprouting.Solver_IntVar(self, *args)
    def BoolVar(self, *args): return _pywraprouting.Solver_BoolVar(self, *args)
    def IntConst(self, *args): return _pywraprouting.Solver_IntConst(self, *args)
    def Sum(self, *args): return _pywraprouting.Solver_Sum(self, *args)
    def ScalProd(self, *args): return _pywraprouting.Solver_ScalProd(self, *args)
    def Div(self, *args): return _pywraprouting.Solver_Div(self, *args)
    def Abs(self, *args): return _pywraprouting.Solver_Abs(self, *args)
    def Power(self, *args): return _pywraprouting.Solver_Power(self, *args)
    def MonotonicElement(self, *args): return _pywraprouting.Solver_MonotonicElement(self, *args)
    def Element(self, *args): return _pywraprouting.Solver_Element(self, *args)
    def IndexExpression(self, *args): return _pywraprouting.Solver_IndexExpression(self, *args)
    def Min(self, *args): return _pywraprouting.Solver_Min(self, *args)
    def Max(self, *args): return _pywraprouting.Solver_Max(self, *args)
    def ConvexPiecewiseExpr(self, *args): return _pywraprouting.Solver_ConvexPiecewiseExpr(self, *args)
    def SemiContinuousExpr(self, *args): return _pywraprouting.Solver_SemiContinuousExpr(self, *args)
    def TrueConstraint(self): return _pywraprouting.Solver_TrueConstraint(self)
    def FalseConstraint(self, *args): return _pywraprouting.Solver_FalseConstraint(self, *args)
    def IsEqualCstCt(self, *args): return _pywraprouting.Solver_IsEqualCstCt(self, *args)
    def IsEqualCstVar(self, *args): return _pywraprouting.Solver_IsEqualCstVar(self, *args)
    def IsEqualCt(self, *args): return _pywraprouting.Solver_IsEqualCt(self, *args)
    def IsEqualVar(self, *args): return _pywraprouting.Solver_IsEqualVar(self, *args)
    def IsDifferentCstCt(self, *args): return _pywraprouting.Solver_IsDifferentCstCt(self, *args)
    def IsDifferentCstVar(self, *args): return _pywraprouting.Solver_IsDifferentCstVar(self, *args)
    def IsDifferentVar(self, *args): return _pywraprouting.Solver_IsDifferentVar(self, *args)
    def IsDifferentCt(self, *args): return _pywraprouting.Solver_IsDifferentCt(self, *args)
    def IsLessOrEqualCstCt(self, *args): return _pywraprouting.Solver_IsLessOrEqualCstCt(self, *args)
    def IsLessOrEqualCstVar(self, *args): return _pywraprouting.Solver_IsLessOrEqualCstVar(self, *args)
    def IsLessOrEqualVar(self, *args): return _pywraprouting.Solver_IsLessOrEqualVar(self, *args)
    def IsLessOrEqualCt(self, *args): return _pywraprouting.Solver_IsLessOrEqualCt(self, *args)
    def IsGreaterOrEqualCstCt(self, *args): return _pywraprouting.Solver_IsGreaterOrEqualCstCt(self, *args)
    def IsGreaterOrEqualCstVar(self, *args): return _pywraprouting.Solver_IsGreaterOrEqualCstVar(self, *args)
    def IsGreaterOrEqualVar(self, *args): return _pywraprouting.Solver_IsGreaterOrEqualVar(self, *args)
    def IsGreaterOrEqualCt(self, *args): return _pywraprouting.Solver_IsGreaterOrEqualCt(self, *args)
    def IsGreaterCstCt(self, *args): return _pywraprouting.Solver_IsGreaterCstCt(self, *args)
    def IsGreaterCstVar(self, *args): return _pywraprouting.Solver_IsGreaterCstVar(self, *args)
    def IsGreaterVar(self, *args): return _pywraprouting.Solver_IsGreaterVar(self, *args)
    def IsGreaterCt(self, *args): return _pywraprouting.Solver_IsGreaterCt(self, *args)
    def IsLessCstCt(self, *args): return _pywraprouting.Solver_IsLessCstCt(self, *args)
    def IsLessCstVar(self, *args): return _pywraprouting.Solver_IsLessCstVar(self, *args)
    def IsLessVar(self, *args): return _pywraprouting.Solver_IsLessVar(self, *args)
    def IsLessCt(self, *args): return _pywraprouting.Solver_IsLessCt(self, *args)
    def SumLessOrEqual(self, *args): return _pywraprouting.Solver_SumLessOrEqual(self, *args)
    def SumGreaterOrEqual(self, *args): return _pywraprouting.Solver_SumGreaterOrEqual(self, *args)
    def SumEquality(self, *args): return _pywraprouting.Solver_SumEquality(self, *args)
    def ScalProdEquality(self, *args): return _pywraprouting.Solver_ScalProdEquality(self, *args)
    def ScalProdGreaterOrEqual(self, *args): return _pywraprouting.Solver_ScalProdGreaterOrEqual(self, *args)
    def ScalProdLessOrEqual(self, *args): return _pywraprouting.Solver_ScalProdLessOrEqual(self, *args)
    def MinEquality(self, *args): return _pywraprouting.Solver_MinEquality(self, *args)
    def MaxEquality(self, *args): return _pywraprouting.Solver_MaxEquality(self, *args)
    def ElementEquality(self, *args): return _pywraprouting.Solver_ElementEquality(self, *args)
    def AbsEquality(self, *args): return _pywraprouting.Solver_AbsEquality(self, *args)
    def IndexOfConstraint(self, *args): return _pywraprouting.Solver_IndexOfConstraint(self, *args)
    def CallbackDemon(self, *args): return _pywraprouting.Solver_CallbackDemon(self, *args)
    def ModuloConstraint(self, *args): return _pywraprouting.Solver_ModuloConstraint(self, *args)
    def BetweenCt(self, *args): return _pywraprouting.Solver_BetweenCt(self, *args)
    def IsBetweenCt(self, *args): return _pywraprouting.Solver_IsBetweenCt(self, *args)
    def IsMemberCt(self, *args): return _pywraprouting.Solver_IsMemberCt(self, *args)
    def IsMemberVar(self, *args): return _pywraprouting.Solver_IsMemberVar(self, *args)
    def MemberCt(self, *args): return _pywraprouting.Solver_MemberCt(self, *args)
    def Count(self, *args): return _pywraprouting.Solver_Count(self, *args)
    def Distribute(self, *args): return _pywraprouting.Solver_Distribute(self, *args)
    def Deviation(self, *args): return _pywraprouting.Solver_Deviation(self, *args)
    def AllDifferent(self, *args): return _pywraprouting.Solver_AllDifferent(self, *args)
    def SortingConstraint(self, *args): return _pywraprouting.Solver_SortingConstraint(self, *args)
    def NoCycle(self, *args): return _pywraprouting.Solver_NoCycle(self, *args)
    def PathCumul(self, *args): return _pywraprouting.Solver_PathCumul(self, *args)
    def MapDomain(self, *args): return _pywraprouting.Solver_MapDomain(self, *args)
    def AllowedAssignments(self, *args): return _pywraprouting.Solver_AllowedAssignments(self, *args)
    def TransitionConstraint(self, *args): return _pywraprouting.Solver_TransitionConstraint(self, *args)
    def Pack(self, *args): return _pywraprouting.Solver_Pack(self, *args)
    def FixedDurationIntervalVar(self, *args): return _pywraprouting.Solver_FixedDurationIntervalVar(self, *args)
    def FixedDurationIntervalVarArray(self, *args): return _pywraprouting.Solver_FixedDurationIntervalVarArray(self, *args)
    def FixedInterval(self, *args): return _pywraprouting.Solver_FixedInterval(self, *args)
    def MirrorInterval(self, *args): return _pywraprouting.Solver_MirrorInterval(self, *args)
    def IntervalRelaxedMin(self, *args): return _pywraprouting.Solver_IntervalRelaxedMin(self, *args)
    def IntervalRelaxedMax(self, *args): return _pywraprouting.Solver_IntervalRelaxedMax(self, *args)
    def IntervalVarRelation(self, *args): return _pywraprouting.Solver_IntervalVarRelation(self, *args)
    def TemporalDisjunction(self, *args): return _pywraprouting.Solver_TemporalDisjunction(self, *args)
    def DisjunctiveConstraint(self, *args): return _pywraprouting.Solver_DisjunctiveConstraint(self, *args)
    def Cumulative(self, *args): return _pywraprouting.Solver_Cumulative(self, *args)
    def Assignment(self, *args): return _pywraprouting.Solver_Assignment(self, *args)
    def FirstSolutionCollector(self, *args): return _pywraprouting.Solver_FirstSolutionCollector(self, *args)
    def LastSolutionCollector(self, *args): return _pywraprouting.Solver_LastSolutionCollector(self, *args)
    def BestValueSolutionCollector(self, *args): return _pywraprouting.Solver_BestValueSolutionCollector(self, *args)
    def AllSolutionCollector(self, *args): return _pywraprouting.Solver_AllSolutionCollector(self, *args)
    def Minimize(self, *args): return _pywraprouting.Solver_Minimize(self, *args)
    def Maximize(self, *args): return _pywraprouting.Solver_Maximize(self, *args)
    def Optimize(self, *args): return _pywraprouting.Solver_Optimize(self, *args)
    def WeightedMinimize(self, *args): return _pywraprouting.Solver_WeightedMinimize(self, *args)
    def WeightedMaximize(self, *args): return _pywraprouting.Solver_WeightedMaximize(self, *args)
    def WeightedOptimize(self, *args): return _pywraprouting.Solver_WeightedOptimize(self, *args)
    def TabuSearch(self, *args): return _pywraprouting.Solver_TabuSearch(self, *args)
    def SimulatedAnnealing(self, *args): return _pywraprouting.Solver_SimulatedAnnealing(self, *args)
    def LubyRestart(self, *args): return _pywraprouting.Solver_LubyRestart(self, *args)
    def ConstantRestart(self, *args): return _pywraprouting.Solver_ConstantRestart(self, *args)
    def TimeLimit(self, *args): return _pywraprouting.Solver_TimeLimit(self, *args)
    def BranchesLimit(self, *args): return _pywraprouting.Solver_BranchesLimit(self, *args)
    def FailuresLimit(self, *args): return _pywraprouting.Solver_FailuresLimit(self, *args)
    def SolutionsLimit(self, *args): return _pywraprouting.Solver_SolutionsLimit(self, *args)
    def Limit(self, *args): return _pywraprouting.Solver_Limit(self, *args)
    def UpdateLimits(self, *args): return _pywraprouting.Solver_UpdateLimits(self, *args)
    def GetTime(self, *args): return _pywraprouting.Solver_GetTime(self, *args)
    def CustomLimit(self, *args): return _pywraprouting.Solver_CustomLimit(self, *args)
    def NoGoodManager(self): return _pywraprouting.Solver_NoGoodManager(self)
    def TreeMonitor(self, *args): return _pywraprouting.Solver_TreeMonitor(self, *args)
    def SearchLog(self, *args): return _pywraprouting.Solver_SearchLog(self, *args)
    def SearchTrace(self, *args): return _pywraprouting.Solver_SearchTrace(self, *args)
    def PrintModelVisitor(self): return _pywraprouting.Solver_PrintModelVisitor(self)
    def StatisticsModelVisitor(self): return _pywraprouting.Solver_StatisticsModelVisitor(self)
    def SymmetryManager(self, *args): return _pywraprouting.Solver_SymmetryManager(self, *args)
    def SimplexConstraint(self, *args): return _pywraprouting.Solver_SimplexConstraint(self, *args)
    def AssignVariableValue(self, *args): return _pywraprouting.Solver_AssignVariableValue(self, *args)
    def VariableLessOrEqualValue(self, *args): return _pywraprouting.Solver_VariableLessOrEqualValue(self, *args)
    def VariableGreaterOrEqualValue(self, *args): return _pywraprouting.Solver_VariableGreaterOrEqualValue(self, *args)
    def SplitVariableDomain(self, *args): return _pywraprouting.Solver_SplitVariableDomain(self, *args)
    def AssignVariableValueOrFail(self, *args): return _pywraprouting.Solver_AssignVariableValueOrFail(self, *args)
    def AssignVariablesValues(self, *args): return _pywraprouting.Solver_AssignVariablesValues(self, *args)
    def FailDecision(self): return _pywraprouting.Solver_FailDecision(self)
    def Compose(self, *args): return _pywraprouting.Solver_Compose(self, *args)
    def Try(self, *args): return _pywraprouting.Solver_Try(self, *args)
    def DefaultPhase(self, *args): return _pywraprouting.Solver_DefaultPhase(self, *args)
    def ScheduleOrPostpone(self, *args): return _pywraprouting.Solver_ScheduleOrPostpone(self, *args)
    def RankFirstInterval(self, *args): return _pywraprouting.Solver_RankFirstInterval(self, *args)
    def RankLastInterval(self, *args): return _pywraprouting.Solver_RankLastInterval(self, *args)
    def Phase(self, *args): return _pywraprouting.Solver_Phase(self, *args)
    def DecisionBuilderFromAssignment(self, *args): return _pywraprouting.Solver_DecisionBuilderFromAssignment(self, *args)
    def ConstraintAdder(self, *args): return _pywraprouting.Solver_ConstraintAdder(self, *args)
    def SolveOnce(self, *args): return _pywraprouting.Solver_SolveOnce(self, *args)
    def NestedOptimize(self, *args): return _pywraprouting.Solver_NestedOptimize(self, *args)
    def RestoreAssignment(self, *args): return _pywraprouting.Solver_RestoreAssignment(self, *args)
    def StoreAssignment(self, *args): return _pywraprouting.Solver_StoreAssignment(self, *args)
    def Operator(self, *args): return _pywraprouting.Solver_Operator(self, *args)
    def RandomLNSOperator(self, *args): return _pywraprouting.Solver_RandomLNSOperator(self, *args)
    def MoveTowardTargetOperator(self, *args): return _pywraprouting.Solver_MoveTowardTargetOperator(self, *args)
    def ConcatenateOperators(self, *args): return _pywraprouting.Solver_ConcatenateOperators(self, *args)
    def RandomConcatenateOperators(self, *args): return _pywraprouting.Solver_RandomConcatenateOperators(self, *args)
    def NeighborhoodLimit(self, *args): return _pywraprouting.Solver_NeighborhoodLimit(self, *args)
    def LocalSearchPhase(self, *args): return _pywraprouting.Solver_LocalSearchPhase(self, *args)
    def DefaultSolutionPool(self): return _pywraprouting.Solver_DefaultSolutionPool(self)
    def LocalSearchPhaseParameters(self, *args): return _pywraprouting.Solver_LocalSearchPhaseParameters(self, *args)
    def VariableDomainFilter(self): return _pywraprouting.Solver_VariableDomainFilter(self)
    def TopPeriodicCheck(self): return _pywraprouting.Solver_TopPeriodicCheck(self)
    def TopProgressPercent(self): return _pywraprouting.Solver_TopProgressPercent(self)
    def PushState(self): return _pywraprouting.Solver_PushState(self)
    def PopState(self): return _pywraprouting.Solver_PopState(self)
    def SearchDepth(self): return _pywraprouting.Solver_SearchDepth(self)
    def SearchLeftDepth(self): return _pywraprouting.Solver_SearchLeftDepth(self)
    def SolveDepth(self): return _pywraprouting.Solver_SolveDepth(self)
    def SetBranchSelector(self, *args): return _pywraprouting.Solver_SetBranchSelector(self, *args)
    def ApplyBranchSelector(self, *args): return _pywraprouting.Solver_ApplyBranchSelector(self, *args)
    def Rand64(self, *args): return _pywraprouting.Solver_Rand64(self, *args)
    def Rand32(self, *args): return _pywraprouting.Solver_Rand32(self, *args)
    def ReSeed(self, *args): return _pywraprouting.Solver_ReSeed(self, *args)
    def AddFailHook(self, *args): return _pywraprouting.Solver_AddFailHook(self, *args)
    def ExportProfilingOverview(self, *args): return _pywraprouting.Solver_ExportProfilingOverview(self, *args)
    def CurrentlyInSolve(self): return _pywraprouting.Solver_CurrentlyInSolve(self)
    def constraints(self): return _pywraprouting.Solver_constraints(self)
    def Accept(self, *args): return _pywraprouting.Solver_Accept(self, *args)
    def balancing_decision(self): return _pywraprouting.Solver_balancing_decision(self)
    def set_fail_intercept(self, *args): return _pywraprouting.Solver_set_fail_intercept(self, *args)
    def clear_fail_intercept(self): return _pywraprouting.Solver_clear_fail_intercept(self)
    def demon_profiler(self): return _pywraprouting.Solver_demon_profiler(self)
    def HasName(self, *args): return _pywraprouting.Solver_HasName(self, *args)
    def RegisterDemon(self, *args): return _pywraprouting.Solver_RegisterDemon(self, *args)
    def RegisterIntExpr(self, *args): return _pywraprouting.Solver_RegisterIntExpr(self, *args)
    def RegisterIntVar(self, *args): return _pywraprouting.Solver_RegisterIntVar(self, *args)
    def RegisterIntervalVar(self, *args): return _pywraprouting.Solver_RegisterIntervalVar(self, *args)
    def ActiveSearch(self): return _pywraprouting.Solver_ActiveSearch(self)
    def Cache(self): return _pywraprouting.Solver_Cache(self)
    def InstrumentsDemons(self): return _pywraprouting.Solver_InstrumentsDemons(self)
    def IsProfilingEnabled(self): return _pywraprouting.Solver_IsProfilingEnabled(self)
    def InstrumentsVariables(self): return _pywraprouting.Solver_InstrumentsVariables(self)
    def NameAllVariables(self): return _pywraprouting.Solver_NameAllVariables(self)
    def model_name(self): return _pywraprouting.Solver_model_name(self)
    def Graph(self): return _pywraprouting.Solver_Graph(self)
    def GetPropagationMonitor(self): return _pywraprouting.Solver_GetPropagationMonitor(self)
    def AddPropagationMonitor(self, *args): return _pywraprouting.Solver_AddPropagationMonitor(self, *args)
    def IsBooleanVar(self, *args): return _pywraprouting.Solver_IsBooleanVar(self, *args)
    __swig_getmethods__["SetPythonFlags"] = lambda x: _pywraprouting.Solver_SetPythonFlags
    if _newclass:SetPythonFlags = staticmethod(_pywraprouting.Solver_SetPythonFlags)
    def TreeNoCycle(self, *args): return _pywraprouting.Solver_TreeNoCycle(self, *args)
    def SearchLogWithCallback(self, *args): return _pywraprouting.Solver_SearchLogWithCallback(self, *args)
    def ElementFunction(self, *args): return _pywraprouting.Solver_ElementFunction(self, *args)
    def __str__(self): return _pywraprouting.Solver___str__(self)
    def LNSOperator(self, *args): return _pywraprouting.Solver_LNSOperator(self, *args)
    def LNSNoValuesOperator(self, *args): return _pywraprouting.Solver_LNSNoValuesOperator(self, *args)
    def VarEvalValStrPhase(self, *args): return _pywraprouting.Solver_VarEvalValStrPhase(self, *args)
    def VarStrValEvalPhase(self, *args): return _pywraprouting.Solver_VarStrValEvalPhase(self, *args)
    def VarEvalValEvalPhase(self, *args): return _pywraprouting.Solver_VarEvalValEvalPhase(self, *args)
    def VarStrValEvalTieBreakPhase(self, *args): return _pywraprouting.Solver_VarStrValEvalTieBreakPhase(self, *args)
    def VarEvalValEvalTieBreakPhase(self, *args): return _pywraprouting.Solver_VarEvalValEvalTieBreakPhase(self, *args)
    def EvalEvalStrPhase(self, *args): return _pywraprouting.Solver_EvalEvalStrPhase(self, *args)
    def EvalEvalStrTieBreakPhase(self, *args): return _pywraprouting.Solver_EvalEvalStrTieBreakPhase(self, *args)
    def GuidedLocalSearch(self, *args): return _pywraprouting.Solver_GuidedLocalSearch(self, *args)
    def LocalSearchObjectiveFilter(self, *args): return _pywraprouting.Solver_LocalSearchObjectiveFilter(self, *args)
Solver_swigregister = _pywraprouting.Solver_swigregister
Solver_swigregister(Solver)

def Solver_UpgradeModel(*args):
  return _pywraprouting.Solver_UpgradeModel(*args)
Solver_UpgradeModel = _pywraprouting.Solver_UpgradeModel

def Solver_MemoryUsage():
  return _pywraprouting.Solver_MemoryUsage()
Solver_MemoryUsage = _pywraprouting.Solver_MemoryUsage

def Solver_SetPythonFlags(*args):
  return _pywraprouting.Solver_SetPythonFlags(*args)
Solver_SetPythonFlags = _pywraprouting.Solver_SetPythonFlags


def Zero():
  return _pywraprouting.Zero()
Zero = _pywraprouting.Zero
class BaseObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseObject, name)
    def __init__(self): 
        this = _pywraprouting.new_BaseObject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_BaseObject
    __del__ = lambda self : None;
    def __str__(self): return _pywraprouting.BaseObject___str__(self)
    def __repr__(self): return _pywraprouting.BaseObject___repr__(self)
BaseObject_swigregister = _pywraprouting.BaseObject_swigregister
BaseObject_swigregister(BaseObject)

class PropagationBaseObject(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropagationBaseObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropagationBaseObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_PropagationBaseObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_PropagationBaseObject
    __del__ = lambda self : None;
    def solver(self): return _pywraprouting.PropagationBaseObject_solver(self)
    def FreezeQueue(self): return _pywraprouting.PropagationBaseObject_FreezeQueue(self)
    def UnfreezeQueue(self): return _pywraprouting.PropagationBaseObject_UnfreezeQueue(self)
    def Enqueue(self, *args): return _pywraprouting.PropagationBaseObject_Enqueue(self, *args)
    def ProcessDemonsOnQueue(self): return _pywraprouting.PropagationBaseObject_ProcessDemonsOnQueue(self)
    def set_queue_action_on_fail(self, *args): return _pywraprouting.PropagationBaseObject_set_queue_action_on_fail(self, *args)
    def clear_queue_action_on_fail(self): return _pywraprouting.PropagationBaseObject_clear_queue_action_on_fail(self)
    def name(self): return _pywraprouting.PropagationBaseObject_name(self)
    def set_name(self, *args): return _pywraprouting.PropagationBaseObject_set_name(self, *args)
    def HasName(self): return _pywraprouting.PropagationBaseObject_HasName(self)
    def BaseName(self): return _pywraprouting.PropagationBaseObject_BaseName(self)
PropagationBaseObject_swigregister = _pywraprouting.PropagationBaseObject_swigregister
PropagationBaseObject_swigregister(PropagationBaseObject)

class Decision(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decision, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Decision, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _pywraprouting.delete_Decision
    __del__ = lambda self : None;
    def Apply(self, *args): return _pywraprouting.Decision_Apply(self, *args)
    def Refute(self, *args): return _pywraprouting.Decision_Refute(self, *args)
    def Accept(self, *args): return _pywraprouting.Decision_Accept(self, *args)
    def __repr__(self): return _pywraprouting.Decision___repr__(self)
Decision_swigregister = _pywraprouting.Decision_swigregister
Decision_swigregister(Decision)

class DecisionVisitor(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecisionVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecisionVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pywraprouting.new_DecisionVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_DecisionVisitor
    __del__ = lambda self : None;
    def VisitSetVariableValue(self, *args): return _pywraprouting.DecisionVisitor_VisitSetVariableValue(self, *args)
    def VisitSplitVariableDomain(self, *args): return _pywraprouting.DecisionVisitor_VisitSplitVariableDomain(self, *args)
    def VisitScheduleOrPostpone(self, *args): return _pywraprouting.DecisionVisitor_VisitScheduleOrPostpone(self, *args)
    def VisitRankFirstInterval(self, *args): return _pywraprouting.DecisionVisitor_VisitRankFirstInterval(self, *args)
    def VisitRankLastInterval(self, *args): return _pywraprouting.DecisionVisitor_VisitRankLastInterval(self, *args)
    def VisitUnknownDecision(self): return _pywraprouting.DecisionVisitor_VisitUnknownDecision(self)
DecisionVisitor_swigregister = _pywraprouting.DecisionVisitor_swigregister
DecisionVisitor_swigregister(DecisionVisitor)

class DecisionBuilder(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecisionBuilder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _pywraprouting.delete_DecisionBuilder
    __del__ = lambda self : None;
    def Next(self, *args): return _pywraprouting.DecisionBuilder_Next(self, *args)
    def __repr__(self): return _pywraprouting.DecisionBuilder___repr__(self)
DecisionBuilder_swigregister = _pywraprouting.DecisionBuilder_swigregister
DecisionBuilder_swigregister(DecisionBuilder)

class Demon(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Demon, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Demon, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_Demon
    __del__ = lambda self : None;
    def Run(self, *args): return _pywraprouting.Demon_Run(self, *args)
    def priority(self): return _pywraprouting.Demon_priority(self)
    def inhibit(self, *args): return _pywraprouting.Demon_inhibit(self, *args)
    def desinhibit(self, *args): return _pywraprouting.Demon_desinhibit(self, *args)
Demon_swigregister = _pywraprouting.Demon_swigregister
Demon_swigregister(Demon)

class Action(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_Action
    __del__ = lambda self : None;
    def Run(self, *args): return _pywraprouting.Action_Run(self, *args)
Action_swigregister = _pywraprouting.Action_swigregister
Action_swigregister(Action)

class ModelVisitor(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelVisitor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_ModelVisitor
    __del__ = lambda self : None;
    def BeginVisitModel(self, *args): return _pywraprouting.ModelVisitor_BeginVisitModel(self, *args)
    def EndVisitModel(self, *args): return _pywraprouting.ModelVisitor_EndVisitModel(self, *args)
    def BeginVisitConstraint(self, *args): return _pywraprouting.ModelVisitor_BeginVisitConstraint(self, *args)
    def EndVisitConstraint(self, *args): return _pywraprouting.ModelVisitor_EndVisitConstraint(self, *args)
    def BeginVisitExtension(self, *args): return _pywraprouting.ModelVisitor_BeginVisitExtension(self, *args)
    def EndVisitExtension(self, *args): return _pywraprouting.ModelVisitor_EndVisitExtension(self, *args)
    def BeginVisitIntegerExpression(self, *args): return _pywraprouting.ModelVisitor_BeginVisitIntegerExpression(self, *args)
    def EndVisitIntegerExpression(self, *args): return _pywraprouting.ModelVisitor_EndVisitIntegerExpression(self, *args)
    def VisitIntegerVariable(self, *args): return _pywraprouting.ModelVisitor_VisitIntegerVariable(self, *args)
    def VisitIntervalVariable(self, *args): return _pywraprouting.ModelVisitor_VisitIntervalVariable(self, *args)
    def VisitSequenceVariable(self, *args): return _pywraprouting.ModelVisitor_VisitSequenceVariable(self, *args)
    def VisitIntegerArgument(self, *args): return _pywraprouting.ModelVisitor_VisitIntegerArgument(self, *args)
    def VisitIntegerArrayArgument(self, *args): return _pywraprouting.ModelVisitor_VisitIntegerArrayArgument(self, *args)
    def VisitIntegerMatrixArgument(self, *args): return _pywraprouting.ModelVisitor_VisitIntegerMatrixArgument(self, *args)
    def VisitIntegerExpressionArgument(self, *args): return _pywraprouting.ModelVisitor_VisitIntegerExpressionArgument(self, *args)
    def VisitIntegerVariableArrayArgument(self, *args): return _pywraprouting.ModelVisitor_VisitIntegerVariableArrayArgument(self, *args)
    def VisitIntervalArgument(self, *args): return _pywraprouting.ModelVisitor_VisitIntervalArgument(self, *args)
    def VisitIntervalArrayArgument(self, *args): return _pywraprouting.ModelVisitor_VisitIntervalArrayArgument(self, *args)
    def VisitSequenceArgument(self, *args): return _pywraprouting.ModelVisitor_VisitSequenceArgument(self, *args)
    def VisitSequenceArrayArgument(self, *args): return _pywraprouting.ModelVisitor_VisitSequenceArrayArgument(self, *args)
    def __init__(self): 
        this = _pywraprouting.new_ModelVisitor()
        try: self.this.append(this)
        except: self.this = this
ModelVisitor_swigregister = _pywraprouting.ModelVisitor_swigregister
ModelVisitor_swigregister(ModelVisitor)
ModelVisitor.kAbs = _pywraprouting.cvar.ModelVisitor_kAbs
ModelVisitor.kAbsEqual = _pywraprouting.cvar.ModelVisitor_kAbsEqual
ModelVisitor.kAllDifferent = _pywraprouting.cvar.ModelVisitor_kAllDifferent
ModelVisitor.kAllowedAssignments = _pywraprouting.cvar.ModelVisitor_kAllowedAssignments
ModelVisitor.kIndexOf = _pywraprouting.cvar.ModelVisitor_kIndexOf
ModelVisitor.kBetween = _pywraprouting.cvar.ModelVisitor_kBetween
ModelVisitor.kConvexPiecewise = _pywraprouting.cvar.ModelVisitor_kConvexPiecewise
ModelVisitor.kCountEqual = _pywraprouting.cvar.ModelVisitor_kCountEqual
ModelVisitor.kCumulative = _pywraprouting.cvar.ModelVisitor_kCumulative
ModelVisitor.kDeviation = _pywraprouting.cvar.ModelVisitor_kDeviation
ModelVisitor.kDifference = _pywraprouting.cvar.ModelVisitor_kDifference
ModelVisitor.kDisjunctive = _pywraprouting.cvar.ModelVisitor_kDisjunctive
ModelVisitor.kDistribute = _pywraprouting.cvar.ModelVisitor_kDistribute
ModelVisitor.kDivide = _pywraprouting.cvar.ModelVisitor_kDivide
ModelVisitor.kDurationExpr = _pywraprouting.cvar.ModelVisitor_kDurationExpr
ModelVisitor.kElement = _pywraprouting.cvar.ModelVisitor_kElement
ModelVisitor.kElementEqual = _pywraprouting.cvar.ModelVisitor_kElementEqual
ModelVisitor.kEndExpr = _pywraprouting.cvar.ModelVisitor_kEndExpr
ModelVisitor.kEquality = _pywraprouting.cvar.ModelVisitor_kEquality
ModelVisitor.kFalseConstraint = _pywraprouting.cvar.ModelVisitor_kFalseConstraint
ModelVisitor.kGlobalCardinality = _pywraprouting.cvar.ModelVisitor_kGlobalCardinality
ModelVisitor.kGreater = _pywraprouting.cvar.ModelVisitor_kGreater
ModelVisitor.kGreaterOrEqual = _pywraprouting.cvar.ModelVisitor_kGreaterOrEqual
ModelVisitor.kIntegerVariable = _pywraprouting.cvar.ModelVisitor_kIntegerVariable
ModelVisitor.kIntervalBinaryRelation = _pywraprouting.cvar.ModelVisitor_kIntervalBinaryRelation
ModelVisitor.kIntervalDisjunction = _pywraprouting.cvar.ModelVisitor_kIntervalDisjunction
ModelVisitor.kIntervalUnaryRelation = _pywraprouting.cvar.ModelVisitor_kIntervalUnaryRelation
ModelVisitor.kIntervalVariable = _pywraprouting.cvar.ModelVisitor_kIntervalVariable
ModelVisitor.kIsBetween = _pywraprouting.cvar.ModelVisitor_kIsBetween
ModelVisitor.kIsDifferent = _pywraprouting.cvar.ModelVisitor_kIsDifferent
ModelVisitor.kIsEqual = _pywraprouting.cvar.ModelVisitor_kIsEqual
ModelVisitor.kIsGreater = _pywraprouting.cvar.ModelVisitor_kIsGreater
ModelVisitor.kIsGreaterOrEqual = _pywraprouting.cvar.ModelVisitor_kIsGreaterOrEqual
ModelVisitor.kIsLess = _pywraprouting.cvar.ModelVisitor_kIsLess
ModelVisitor.kIsLessOrEqual = _pywraprouting.cvar.ModelVisitor_kIsLessOrEqual
ModelVisitor.kIsMember = _pywraprouting.cvar.ModelVisitor_kIsMember
ModelVisitor.kLess = _pywraprouting.cvar.ModelVisitor_kLess
ModelVisitor.kLessOrEqual = _pywraprouting.cvar.ModelVisitor_kLessOrEqual
ModelVisitor.kLinkExprVar = _pywraprouting.cvar.ModelVisitor_kLinkExprVar
ModelVisitor.kMapDomain = _pywraprouting.cvar.ModelVisitor_kMapDomain
ModelVisitor.kMax = _pywraprouting.cvar.ModelVisitor_kMax
ModelVisitor.kMaxEqual = _pywraprouting.cvar.ModelVisitor_kMaxEqual
ModelVisitor.kMember = _pywraprouting.cvar.ModelVisitor_kMember
ModelVisitor.kMin = _pywraprouting.cvar.ModelVisitor_kMin
ModelVisitor.kMinEqual = _pywraprouting.cvar.ModelVisitor_kMinEqual
ModelVisitor.kModuloConstraint = _pywraprouting.cvar.ModelVisitor_kModuloConstraint
ModelVisitor.kNoCycle = _pywraprouting.cvar.ModelVisitor_kNoCycle
ModelVisitor.kNonEqual = _pywraprouting.cvar.ModelVisitor_kNonEqual
ModelVisitor.kOpposite = _pywraprouting.cvar.ModelVisitor_kOpposite
ModelVisitor.kPack = _pywraprouting.cvar.ModelVisitor_kPack
ModelVisitor.kPathCumul = _pywraprouting.cvar.ModelVisitor_kPathCumul
ModelVisitor.kPerformedExpr = _pywraprouting.cvar.ModelVisitor_kPerformedExpr
ModelVisitor.kPower = _pywraprouting.cvar.ModelVisitor_kPower
ModelVisitor.kProduct = _pywraprouting.cvar.ModelVisitor_kProduct
ModelVisitor.kScalProd = _pywraprouting.cvar.ModelVisitor_kScalProd
ModelVisitor.kScalProdEqual = _pywraprouting.cvar.ModelVisitor_kScalProdEqual
ModelVisitor.kScalProdGreaterOrEqual = _pywraprouting.cvar.ModelVisitor_kScalProdGreaterOrEqual
ModelVisitor.kScalProdLessOrEqual = _pywraprouting.cvar.ModelVisitor_kScalProdLessOrEqual
ModelVisitor.kSemiContinuous = _pywraprouting.cvar.ModelVisitor_kSemiContinuous
ModelVisitor.kSequenceVariable = _pywraprouting.cvar.ModelVisitor_kSequenceVariable
ModelVisitor.kSortingConstraint = _pywraprouting.cvar.ModelVisitor_kSortingConstraint
ModelVisitor.kSquare = _pywraprouting.cvar.ModelVisitor_kSquare
ModelVisitor.kStartExpr = _pywraprouting.cvar.ModelVisitor_kStartExpr
ModelVisitor.kSum = _pywraprouting.cvar.ModelVisitor_kSum
ModelVisitor.kSumEqual = _pywraprouting.cvar.ModelVisitor_kSumEqual
ModelVisitor.kSumGreaterOrEqual = _pywraprouting.cvar.ModelVisitor_kSumGreaterOrEqual
ModelVisitor.kSumLessOrEqual = _pywraprouting.cvar.ModelVisitor_kSumLessOrEqual
ModelVisitor.kTransition = _pywraprouting.cvar.ModelVisitor_kTransition
ModelVisitor.kTrueConstraint = _pywraprouting.cvar.ModelVisitor_kTrueConstraint
ModelVisitor.kVarBoundWatcher = _pywraprouting.cvar.ModelVisitor_kVarBoundWatcher
ModelVisitor.kVarValueWatcher = _pywraprouting.cvar.ModelVisitor_kVarValueWatcher
ModelVisitor.kCountAssignedItemsExtension = _pywraprouting.cvar.ModelVisitor_kCountAssignedItemsExtension
ModelVisitor.kCountUsedBinsExtension = _pywraprouting.cvar.ModelVisitor_kCountUsedBinsExtension
ModelVisitor.kInt64ToBoolExtension = _pywraprouting.cvar.ModelVisitor_kInt64ToBoolExtension
ModelVisitor.kInt64ToInt64Extension = _pywraprouting.cvar.ModelVisitor_kInt64ToInt64Extension
ModelVisitor.kObjectiveExtension = _pywraprouting.cvar.ModelVisitor_kObjectiveExtension
ModelVisitor.kSearchLimitExtension = _pywraprouting.cvar.ModelVisitor_kSearchLimitExtension
ModelVisitor.kUsageEqualVariableExtension = _pywraprouting.cvar.ModelVisitor_kUsageEqualVariableExtension
ModelVisitor.kUsageLessConstantExtension = _pywraprouting.cvar.ModelVisitor_kUsageLessConstantExtension
ModelVisitor.kVariableGroupExtension = _pywraprouting.cvar.ModelVisitor_kVariableGroupExtension
ModelVisitor.kVariableUsageLessConstantExtension = _pywraprouting.cvar.ModelVisitor_kVariableUsageLessConstantExtension
ModelVisitor.kWeightedSumOfAssignedEqualVariableExtension = _pywraprouting.cvar.ModelVisitor_kWeightedSumOfAssignedEqualVariableExtension
ModelVisitor.kActiveArgument = _pywraprouting.cvar.ModelVisitor_kActiveArgument
ModelVisitor.kAssumePathsArgument = _pywraprouting.cvar.ModelVisitor_kAssumePathsArgument
ModelVisitor.kBranchesLimitArgument = _pywraprouting.cvar.ModelVisitor_kBranchesLimitArgument
ModelVisitor.kCapacityArgument = _pywraprouting.cvar.ModelVisitor_kCapacityArgument
ModelVisitor.kCardsArgument = _pywraprouting.cvar.ModelVisitor_kCardsArgument
ModelVisitor.kCoefficientsArgument = _pywraprouting.cvar.ModelVisitor_kCoefficientsArgument
ModelVisitor.kCountArgument = _pywraprouting.cvar.ModelVisitor_kCountArgument
ModelVisitor.kCumulativeArgument = _pywraprouting.cvar.ModelVisitor_kCumulativeArgument
ModelVisitor.kCumulsArgument = _pywraprouting.cvar.ModelVisitor_kCumulsArgument
ModelVisitor.kDemandsArgument = _pywraprouting.cvar.ModelVisitor_kDemandsArgument
ModelVisitor.kDurationMaxArgument = _pywraprouting.cvar.ModelVisitor_kDurationMaxArgument
ModelVisitor.kDurationMinArgument = _pywraprouting.cvar.ModelVisitor_kDurationMinArgument
ModelVisitor.kEarlyCostArgument = _pywraprouting.cvar.ModelVisitor_kEarlyCostArgument
ModelVisitor.kEarlyDateArgument = _pywraprouting.cvar.ModelVisitor_kEarlyDateArgument
ModelVisitor.kEndMaxArgument = _pywraprouting.cvar.ModelVisitor_kEndMaxArgument
ModelVisitor.kEndMinArgument = _pywraprouting.cvar.ModelVisitor_kEndMinArgument
ModelVisitor.kExpressionArgument = _pywraprouting.cvar.ModelVisitor_kExpressionArgument
ModelVisitor.kFailuresLimitArgument = _pywraprouting.cvar.ModelVisitor_kFailuresLimitArgument
ModelVisitor.kFinalStatesArgument = _pywraprouting.cvar.ModelVisitor_kFinalStatesArgument
ModelVisitor.kFixedChargeArgument = _pywraprouting.cvar.ModelVisitor_kFixedChargeArgument
ModelVisitor.kIndex2Argument = _pywraprouting.cvar.ModelVisitor_kIndex2Argument
ModelVisitor.kIndexArgument = _pywraprouting.cvar.ModelVisitor_kIndexArgument
ModelVisitor.kInitialState = _pywraprouting.cvar.ModelVisitor_kInitialState
ModelVisitor.kIntervalArgument = _pywraprouting.cvar.ModelVisitor_kIntervalArgument
ModelVisitor.kIntervalsArgument = _pywraprouting.cvar.ModelVisitor_kIntervalsArgument
ModelVisitor.kLateCostArgument = _pywraprouting.cvar.ModelVisitor_kLateCostArgument
ModelVisitor.kLateDateArgument = _pywraprouting.cvar.ModelVisitor_kLateDateArgument
ModelVisitor.kLeftArgument = _pywraprouting.cvar.ModelVisitor_kLeftArgument
ModelVisitor.kMaxArgument = _pywraprouting.cvar.ModelVisitor_kMaxArgument
ModelVisitor.kMaximizeArgument = _pywraprouting.cvar.ModelVisitor_kMaximizeArgument
ModelVisitor.kMinArgument = _pywraprouting.cvar.ModelVisitor_kMinArgument
ModelVisitor.kModuloArgument = _pywraprouting.cvar.ModelVisitor_kModuloArgument
ModelVisitor.kNextsArgument = _pywraprouting.cvar.ModelVisitor_kNextsArgument
ModelVisitor.kOptionalArgument = _pywraprouting.cvar.ModelVisitor_kOptionalArgument
ModelVisitor.kRangeArgument = _pywraprouting.cvar.ModelVisitor_kRangeArgument
ModelVisitor.kRelationArgument = _pywraprouting.cvar.ModelVisitor_kRelationArgument
ModelVisitor.kRightArgument = _pywraprouting.cvar.ModelVisitor_kRightArgument
ModelVisitor.kSequenceArgument = _pywraprouting.cvar.ModelVisitor_kSequenceArgument
ModelVisitor.kSequencesArgument = _pywraprouting.cvar.ModelVisitor_kSequencesArgument
ModelVisitor.kSizeArgument = _pywraprouting.cvar.ModelVisitor_kSizeArgument
ModelVisitor.kSmartTimeCheckArgument = _pywraprouting.cvar.ModelVisitor_kSmartTimeCheckArgument
ModelVisitor.kSolutionLimitArgument = _pywraprouting.cvar.ModelVisitor_kSolutionLimitArgument
ModelVisitor.kStartMaxArgument = _pywraprouting.cvar.ModelVisitor_kStartMaxArgument
ModelVisitor.kStartMinArgument = _pywraprouting.cvar.ModelVisitor_kStartMinArgument
ModelVisitor.kStepArgument = _pywraprouting.cvar.ModelVisitor_kStepArgument
ModelVisitor.kTargetArgument = _pywraprouting.cvar.ModelVisitor_kTargetArgument
ModelVisitor.kTimeLimitArgument = _pywraprouting.cvar.ModelVisitor_kTimeLimitArgument
ModelVisitor.kTransitsArgument = _pywraprouting.cvar.ModelVisitor_kTransitsArgument
ModelVisitor.kTuplesArgument = _pywraprouting.cvar.ModelVisitor_kTuplesArgument
ModelVisitor.kValueArgument = _pywraprouting.cvar.ModelVisitor_kValueArgument
ModelVisitor.kValuesArgument = _pywraprouting.cvar.ModelVisitor_kValuesArgument
ModelVisitor.kVariableArgument = _pywraprouting.cvar.ModelVisitor_kVariableArgument
ModelVisitor.kVarsArgument = _pywraprouting.cvar.ModelVisitor_kVarsArgument
ModelVisitor.kCoverOperation = _pywraprouting.cvar.ModelVisitor_kCoverOperation
ModelVisitor.kMirrorOperation = _pywraprouting.cvar.ModelVisitor_kMirrorOperation
ModelVisitor.kRelaxedMaxOperation = _pywraprouting.cvar.ModelVisitor_kRelaxedMaxOperation
ModelVisitor.kRelaxedMinOperation = _pywraprouting.cvar.ModelVisitor_kRelaxedMinOperation
ModelVisitor.kSumOperation = _pywraprouting.cvar.ModelVisitor_kSumOperation
ModelVisitor.kDifferenceOperation = _pywraprouting.cvar.ModelVisitor_kDifferenceOperation
ModelVisitor.kProductOperation = _pywraprouting.cvar.ModelVisitor_kProductOperation

class Constraint(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _pywraprouting.delete_Constraint
    __del__ = lambda self : None;
    def Post(self): return _pywraprouting.Constraint_Post(self)
    def InitialPropagate(self): return _pywraprouting.Constraint_InitialPropagate(self)
    def PostAndPropagate(self): return _pywraprouting.Constraint_PostAndPropagate(self)
    def Accept(self, *args): return _pywraprouting.Constraint_Accept(self, *args)
    def IsCastConstraint(self): return _pywraprouting.Constraint_IsCastConstraint(self)
    def Var(self): return _pywraprouting.Constraint_Var(self)
    def __repr__(self): return _pywraprouting.Constraint___repr__(self)
    def __add__(self, *args): return _pywraprouting.Constraint___add__(self, *args)
    def __radd__(self, *args): return _pywraprouting.Constraint___radd__(self, *args)
    def __sub__(self, *args): return _pywraprouting.Constraint___sub__(self, *args)
    def __rsub__(self, *args): return _pywraprouting.Constraint___rsub__(self, *args)
    def __mul__(self, *args): return _pywraprouting.Constraint___mul__(self, *args)
    def __rmul__(self, *args): return _pywraprouting.Constraint___rmul__(self, *args)
    def __floordiv__(self, *args): return _pywraprouting.Constraint___floordiv__(self, *args)
    def __neg__(self): return _pywraprouting.Constraint___neg__(self)
    def __abs__(self): return _pywraprouting.Constraint___abs__(self)
    def Square(self): return _pywraprouting.Constraint_Square(self)
    def __eq__(self, *args): return _pywraprouting.Constraint___eq__(self, *args)
    def __ne__(self, *args): return _pywraprouting.Constraint___ne__(self, *args)
    def __ge__(self, *args): return _pywraprouting.Constraint___ge__(self, *args)
    def __gt__(self, *args): return _pywraprouting.Constraint___gt__(self, *args)
    def __le__(self, *args): return _pywraprouting.Constraint___le__(self, *args)
    def __lt__(self, *args): return _pywraprouting.Constraint___lt__(self, *args)
    def MapTo(self, *args): return _pywraprouting.Constraint_MapTo(self, *args)
    def IndexOf(self, *args): return _pywraprouting.Constraint_IndexOf(self, *args)
Constraint_swigregister = _pywraprouting.Constraint_swigregister
Constraint_swigregister(Constraint)

class CastConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CastConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CastConstraint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_CastConstraint
    __del__ = lambda self : None;
    def target_var(self): return _pywraprouting.CastConstraint_target_var(self)
CastConstraint_swigregister = _pywraprouting.CastConstraint_swigregister
CastConstraint_swigregister(CastConstraint)

class SearchMonitor(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SearchMonitor, name)
    kNoProgress = _pywraprouting.SearchMonitor_kNoProgress
    def __init__(self, *args): 
        this = _pywraprouting.new_SearchMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_SearchMonitor
    __del__ = lambda self : None;
    def EnterSearch(self): return _pywraprouting.SearchMonitor_EnterSearch(self)
    def RestartSearch(self): return _pywraprouting.SearchMonitor_RestartSearch(self)
    def ExitSearch(self): return _pywraprouting.SearchMonitor_ExitSearch(self)
    def BeginNextDecision(self, *args): return _pywraprouting.SearchMonitor_BeginNextDecision(self, *args)
    def EndNextDecision(self, *args): return _pywraprouting.SearchMonitor_EndNextDecision(self, *args)
    def ApplyDecision(self, *args): return _pywraprouting.SearchMonitor_ApplyDecision(self, *args)
    def RefuteDecision(self, *args): return _pywraprouting.SearchMonitor_RefuteDecision(self, *args)
    def AfterDecision(self, *args): return _pywraprouting.SearchMonitor_AfterDecision(self, *args)
    def BeginFail(self): return _pywraprouting.SearchMonitor_BeginFail(self)
    def EndFail(self): return _pywraprouting.SearchMonitor_EndFail(self)
    def BeginInitialPropagation(self): return _pywraprouting.SearchMonitor_BeginInitialPropagation(self)
    def EndInitialPropagation(self): return _pywraprouting.SearchMonitor_EndInitialPropagation(self)
    def AcceptSolution(self): return _pywraprouting.SearchMonitor_AcceptSolution(self)
    def AtSolution(self): return _pywraprouting.SearchMonitor_AtSolution(self)
    def NoMoreSolutions(self): return _pywraprouting.SearchMonitor_NoMoreSolutions(self)
    def LocalOptimum(self): return _pywraprouting.SearchMonitor_LocalOptimum(self)
    def AcceptDelta(self, *args): return _pywraprouting.SearchMonitor_AcceptDelta(self, *args)
    def AcceptNeighbor(self): return _pywraprouting.SearchMonitor_AcceptNeighbor(self)
    def solver(self): return _pywraprouting.SearchMonitor_solver(self)
    def FinishCurrentSearch(self): return _pywraprouting.SearchMonitor_FinishCurrentSearch(self)
    def RestartCurrentSearch(self): return _pywraprouting.SearchMonitor_RestartCurrentSearch(self)
    def PeriodicCheck(self): return _pywraprouting.SearchMonitor_PeriodicCheck(self)
    def ProgressPercent(self): return _pywraprouting.SearchMonitor_ProgressPercent(self)
    def Accept(self, *args): return _pywraprouting.SearchMonitor_Accept(self, *args)
    def Install(self): return _pywraprouting.SearchMonitor_Install(self)
    def __repr__(self): return _pywraprouting.SearchMonitor___repr__(self)
SearchMonitor_swigregister = _pywraprouting.SearchMonitor_swigregister
SearchMonitor_swigregister(SearchMonitor)

class IntExpr(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntExpr, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntExpr, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _pywraprouting.delete_IntExpr
    __del__ = lambda self : None;
    def Min(self): return _pywraprouting.IntExpr_Min(self)
    def SetMin(self, *args): return _pywraprouting.IntExpr_SetMin(self, *args)
    def Max(self): return _pywraprouting.IntExpr_Max(self)
    def SetMax(self, *args): return _pywraprouting.IntExpr_SetMax(self, *args)
    def Range(self, *args): return _pywraprouting.IntExpr_Range(self, *args)
    def SetRange(self, *args): return _pywraprouting.IntExpr_SetRange(self, *args)
    def SetValue(self, *args): return _pywraprouting.IntExpr_SetValue(self, *args)
    def Bound(self): return _pywraprouting.IntExpr_Bound(self)
    def IsVar(self): return _pywraprouting.IntExpr_IsVar(self)
    def Var(self): return _pywraprouting.IntExpr_Var(self)
    def VarWithName(self, *args): return _pywraprouting.IntExpr_VarWithName(self, *args)
    def WhenRange(self, *args): return _pywraprouting.IntExpr_WhenRange(self, *args)
    def Accept(self, *args): return _pywraprouting.IntExpr_Accept(self, *args)
    def __repr__(self): return _pywraprouting.IntExpr___repr__(self)
    def __add__(self, *args): return _pywraprouting.IntExpr___add__(self, *args)
    def __radd__(self, *args): return _pywraprouting.IntExpr___radd__(self, *args)
    def __sub__(self, *args): return _pywraprouting.IntExpr___sub__(self, *args)
    def __rsub__(self, *args): return _pywraprouting.IntExpr___rsub__(self, *args)
    def __mul__(self, *args): return _pywraprouting.IntExpr___mul__(self, *args)
    def __rmul__(self, *args): return _pywraprouting.IntExpr___rmul__(self, *args)
    def __floordiv__(self, *args): return _pywraprouting.IntExpr___floordiv__(self, *args)
    def __neg__(self): return _pywraprouting.IntExpr___neg__(self)
    def __abs__(self): return _pywraprouting.IntExpr___abs__(self)
    def Square(self): return _pywraprouting.IntExpr_Square(self)
    def __eq__(self, *args): return _pywraprouting.IntExpr___eq__(self, *args)
    def __ne__(self, *args): return _pywraprouting.IntExpr___ne__(self, *args)
    def __ge__(self, *args): return _pywraprouting.IntExpr___ge__(self, *args)
    def __gt__(self, *args): return _pywraprouting.IntExpr___gt__(self, *args)
    def __le__(self, *args): return _pywraprouting.IntExpr___le__(self, *args)
    def __lt__(self, *args): return _pywraprouting.IntExpr___lt__(self, *args)
    def MapTo(self, *args): return _pywraprouting.IntExpr_MapTo(self, *args)
    def IndexOf(self, *args): return _pywraprouting.IntExpr_IndexOf(self, *args)
IntExpr_swigregister = _pywraprouting.IntExpr_swigregister
IntExpr_swigregister(IntExpr)

class IntVarIterator(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_IntVarIterator
    __del__ = lambda self : None;
    def Init(self): return _pywraprouting.IntVarIterator_Init(self)
    def Ok(self): return _pywraprouting.IntVarIterator_Ok(self)
    def Value(self): return _pywraprouting.IntVarIterator_Value(self)
    def Next(self): return _pywraprouting.IntVarIterator_Next(self)
IntVarIterator_swigregister = _pywraprouting.IntVarIterator_swigregister
IntVarIterator_swigregister(IntVarIterator)

class IntVar(IntExpr):
    __swig_setmethods__ = {}
    for _s in [IntExpr]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVar, name, value)
    __swig_getmethods__ = {}
    for _s in [IntExpr]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVar, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _pywraprouting.delete_IntVar
    __del__ = lambda self : None;
    def IsVar(self): return _pywraprouting.IntVar_IsVar(self)
    def Var(self): return _pywraprouting.IntVar_Var(self)
    def Value(self): return _pywraprouting.IntVar_Value(self)
    def RemoveValue(self, *args): return _pywraprouting.IntVar_RemoveValue(self, *args)
    def RemoveInterval(self, *args): return _pywraprouting.IntVar_RemoveInterval(self, *args)
    def RemoveValues(self, *args): return _pywraprouting.IntVar_RemoveValues(self, *args)
    def SetValues(self, *args): return _pywraprouting.IntVar_SetValues(self, *args)
    def WhenBound(self, *args): return _pywraprouting.IntVar_WhenBound(self, *args)
    def WhenDomain(self, *args): return _pywraprouting.IntVar_WhenDomain(self, *args)
    def Size(self): return _pywraprouting.IntVar_Size(self)
    def Contains(self, *args): return _pywraprouting.IntVar_Contains(self, *args)
    def HoleIterator(self, *args): return _pywraprouting.IntVar_HoleIterator(self, *args)
    def DomainIterator(self, *args): return _pywraprouting.IntVar_DomainIterator(self, *args)
    def OldMin(self): return _pywraprouting.IntVar_OldMin(self)
    def OldMax(self): return _pywraprouting.IntVar_OldMax(self)
    def VarType(self): return _pywraprouting.IntVar_VarType(self)
    def Accept(self, *args): return _pywraprouting.IntVar_Accept(self, *args)
    def IsEqual(self, *args): return _pywraprouting.IntVar_IsEqual(self, *args)
    def IsDifferent(self, *args): return _pywraprouting.IntVar_IsDifferent(self, *args)
    def IsGreaterOrEqual(self, *args): return _pywraprouting.IntVar_IsGreaterOrEqual(self, *args)
    def IsLessOrEqual(self, *args): return _pywraprouting.IntVar_IsLessOrEqual(self, *args)
    def __repr__(self): return _pywraprouting.IntVar___repr__(self)
IntVar_swigregister = _pywraprouting.IntVar_swigregister
IntVar_swigregister(IntVar)

class SolutionCollector(SearchMonitor):
    __swig_setmethods__ = {}
    for _s in [SearchMonitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolutionCollector, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchMonitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SolutionCollector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_SolutionCollector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_SolutionCollector
    __del__ = lambda self : None;
    def Add(self, *args): return _pywraprouting.SolutionCollector_Add(self, *args)
    def AddObjective(self, *args): return _pywraprouting.SolutionCollector_AddObjective(self, *args)
    def EnterSearch(self): return _pywraprouting.SolutionCollector_EnterSearch(self)
    def SolutionCount(self): return _pywraprouting.SolutionCollector_SolutionCount(self)
    def Solution(self, *args): return _pywraprouting.SolutionCollector_Solution(self, *args)
    def WallTime(self, *args): return _pywraprouting.SolutionCollector_WallTime(self, *args)
    def Branches(self, *args): return _pywraprouting.SolutionCollector_Branches(self, *args)
    def Failures(self, *args): return _pywraprouting.SolutionCollector_Failures(self, *args)
    def ObjectiveValue(self, *args): return _pywraprouting.SolutionCollector_ObjectiveValue(self, *args)
    def Value(self, *args): return _pywraprouting.SolutionCollector_Value(self, *args)
    def StartValue(self, *args): return _pywraprouting.SolutionCollector_StartValue(self, *args)
    def EndValue(self, *args): return _pywraprouting.SolutionCollector_EndValue(self, *args)
    def DurationValue(self, *args): return _pywraprouting.SolutionCollector_DurationValue(self, *args)
    def PerformedValue(self, *args): return _pywraprouting.SolutionCollector_PerformedValue(self, *args)
SolutionCollector_swigregister = _pywraprouting.SolutionCollector_swigregister
SolutionCollector_swigregister(SolutionCollector)

class OptimizeVar(SearchMonitor):
    __swig_setmethods__ = {}
    for _s in [SearchMonitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizeVar, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchMonitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizeVar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_OptimizeVar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_OptimizeVar
    __del__ = lambda self : None;
    def Best(self): return _pywraprouting.OptimizeVar_Best(self)
    def Var(self): return _pywraprouting.OptimizeVar_Var(self)
    def EnterSearch(self): return _pywraprouting.OptimizeVar_EnterSearch(self)
    def BeginNextDecision(self, *args): return _pywraprouting.OptimizeVar_BeginNextDecision(self, *args)
    def RefuteDecision(self, *args): return _pywraprouting.OptimizeVar_RefuteDecision(self, *args)
    def AtSolution(self): return _pywraprouting.OptimizeVar_AtSolution(self)
    def AcceptSolution(self): return _pywraprouting.OptimizeVar_AcceptSolution(self)
    def Print(self): return _pywraprouting.OptimizeVar_Print(self)
    def Accept(self, *args): return _pywraprouting.OptimizeVar_Accept(self, *args)
    def ApplyBound(self): return _pywraprouting.OptimizeVar_ApplyBound(self)
OptimizeVar_swigregister = _pywraprouting.OptimizeVar_swigregister
OptimizeVar_swigregister(OptimizeVar)

class SearchLimit(SearchMonitor):
    __swig_setmethods__ = {}
    for _s in [SearchMonitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchLimit, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchMonitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SearchLimit, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_SearchLimit
    __del__ = lambda self : None;
    def IsCrossed(self): return _pywraprouting.SearchLimit_IsCrossed(self)
    def Check(self): return _pywraprouting.SearchLimit_Check(self)
    def Init(self): return _pywraprouting.SearchLimit_Init(self)
    def Copy(self, *args): return _pywraprouting.SearchLimit_Copy(self, *args)
    def Clone(self): return _pywraprouting.SearchLimit_Clone(self)
    def EnterSearch(self): return _pywraprouting.SearchLimit_EnterSearch(self)
    def BeginNextDecision(self, *args): return _pywraprouting.SearchLimit_BeginNextDecision(self, *args)
    def PeriodicCheck(self): return _pywraprouting.SearchLimit_PeriodicCheck(self)
    def RefuteDecision(self, *args): return _pywraprouting.SearchLimit_RefuteDecision(self, *args)
SearchLimit_swigregister = _pywraprouting.SearchLimit_swigregister
SearchLimit_swigregister(SearchLimit)

class NoGood(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoGood, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoGood, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_NoGood
    __del__ = lambda self : None;
    def AddIntegerVariableEqualValueTerm(self, *args): return _pywraprouting.NoGood_AddIntegerVariableEqualValueTerm(self, *args)
    def AddIntegerVariableNotEqualValueTerm(self, *args): return _pywraprouting.NoGood_AddIntegerVariableNotEqualValueTerm(self, *args)
    def Apply(self, *args): return _pywraprouting.NoGood_Apply(self, *args)
    def DebugString(self): return _pywraprouting.NoGood_DebugString(self)
    def __init__(self): 
        this = _pywraprouting.new_NoGood()
        try: self.this.append(this)
        except: self.this = this
NoGood_swigregister = _pywraprouting.NoGood_swigregister
NoGood_swigregister(NoGood)

class NoGoodManager(SearchMonitor):
    __swig_setmethods__ = {}
    for _s in [SearchMonitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoGoodManager, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchMonitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoGoodManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_NoGoodManager
    __del__ = lambda self : None;
    def Clear(self): return _pywraprouting.NoGoodManager_Clear(self)
    def NoGood(self): return _pywraprouting.NoGoodManager_NoGood(self)
    def AddNoGood(self, *args): return _pywraprouting.NoGoodManager_AddNoGood(self, *args)
    def NoGoodCount(self): return _pywraprouting.NoGoodManager_NoGoodCount(self)
    def EnterSearch(self): return _pywraprouting.NoGoodManager_EnterSearch(self)
    def BeginNextDecision(self, *args): return _pywraprouting.NoGoodManager_BeginNextDecision(self, *args)
    def AcceptSolution(self): return _pywraprouting.NoGoodManager_AcceptSolution(self)
NoGoodManager_swigregister = _pywraprouting.NoGoodManager_swigregister
NoGoodManager_swigregister(NoGoodManager)

class IntervalVar(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalVar, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalVar, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _pywraprouting.delete_IntervalVar
    __del__ = lambda self : None;
    def StartMin(self): return _pywraprouting.IntervalVar_StartMin(self)
    def StartMax(self): return _pywraprouting.IntervalVar_StartMax(self)
    def SetStartMin(self, *args): return _pywraprouting.IntervalVar_SetStartMin(self, *args)
    def SetStartMax(self, *args): return _pywraprouting.IntervalVar_SetStartMax(self, *args)
    def SetStartRange(self, *args): return _pywraprouting.IntervalVar_SetStartRange(self, *args)
    def WhenStartRange(self, *args): return _pywraprouting.IntervalVar_WhenStartRange(self, *args)
    def WhenStartBound(self, *args): return _pywraprouting.IntervalVar_WhenStartBound(self, *args)
    def DurationMin(self): return _pywraprouting.IntervalVar_DurationMin(self)
    def DurationMax(self): return _pywraprouting.IntervalVar_DurationMax(self)
    def SetDurationMin(self, *args): return _pywraprouting.IntervalVar_SetDurationMin(self, *args)
    def SetDurationMax(self, *args): return _pywraprouting.IntervalVar_SetDurationMax(self, *args)
    def SetDurationRange(self, *args): return _pywraprouting.IntervalVar_SetDurationRange(self, *args)
    def WhenDurationRange(self, *args): return _pywraprouting.IntervalVar_WhenDurationRange(self, *args)
    def WhenDurationBound(self, *args): return _pywraprouting.IntervalVar_WhenDurationBound(self, *args)
    def EndMin(self): return _pywraprouting.IntervalVar_EndMin(self)
    def EndMax(self): return _pywraprouting.IntervalVar_EndMax(self)
    def SetEndMin(self, *args): return _pywraprouting.IntervalVar_SetEndMin(self, *args)
    def SetEndMax(self, *args): return _pywraprouting.IntervalVar_SetEndMax(self, *args)
    def SetEndRange(self, *args): return _pywraprouting.IntervalVar_SetEndRange(self, *args)
    def WhenEndRange(self, *args): return _pywraprouting.IntervalVar_WhenEndRange(self, *args)
    def WhenEndBound(self, *args): return _pywraprouting.IntervalVar_WhenEndBound(self, *args)
    def MustBePerformed(self): return _pywraprouting.IntervalVar_MustBePerformed(self)
    def MayBePerformed(self): return _pywraprouting.IntervalVar_MayBePerformed(self)
    def CannotBePerformed(self): return _pywraprouting.IntervalVar_CannotBePerformed(self)
    def IsPerformedBound(self): return _pywraprouting.IntervalVar_IsPerformedBound(self)
    def SetPerformed(self, *args): return _pywraprouting.IntervalVar_SetPerformed(self, *args)
    def WhenPerformedBound(self, *args): return _pywraprouting.IntervalVar_WhenPerformedBound(self, *args)
    def WhenAnything(self, *args): return _pywraprouting.IntervalVar_WhenAnything(self, *args)
    def StartExpr(self): return _pywraprouting.IntervalVar_StartExpr(self)
    def DurationExpr(self): return _pywraprouting.IntervalVar_DurationExpr(self)
    def EndExpr(self): return _pywraprouting.IntervalVar_EndExpr(self)
    def PerformedExpr(self): return _pywraprouting.IntervalVar_PerformedExpr(self)
    def SafeStartExpr(self, *args): return _pywraprouting.IntervalVar_SafeStartExpr(self, *args)
    def SafeDurationExpr(self, *args): return _pywraprouting.IntervalVar_SafeDurationExpr(self, *args)
    def SafeEndExpr(self, *args): return _pywraprouting.IntervalVar_SafeEndExpr(self, *args)
    def Accept(self, *args): return _pywraprouting.IntervalVar_Accept(self, *args)
    def __repr__(self): return _pywraprouting.IntervalVar___repr__(self)
    def EndsAfterEnd(self, *args): return _pywraprouting.IntervalVar_EndsAfterEnd(self, *args)
    def EndsAfterStart(self, *args): return _pywraprouting.IntervalVar_EndsAfterStart(self, *args)
    def EndsAtEnd(self, *args): return _pywraprouting.IntervalVar_EndsAtEnd(self, *args)
    def EndsAtStart(self, *args): return _pywraprouting.IntervalVar_EndsAtStart(self, *args)
    def StartsAfterEnd(self, *args): return _pywraprouting.IntervalVar_StartsAfterEnd(self, *args)
    def StartsAfterStart(self, *args): return _pywraprouting.IntervalVar_StartsAfterStart(self, *args)
    def StartsAtEnd(self, *args): return _pywraprouting.IntervalVar_StartsAtEnd(self, *args)
    def StartsAtStart(self, *args): return _pywraprouting.IntervalVar_StartsAtStart(self, *args)
    def StaysInSync(self, *args): return _pywraprouting.IntervalVar_StaysInSync(self, *args)
    def EndsAfter(self, *args): return _pywraprouting.IntervalVar_EndsAfter(self, *args)
    def EndsAt(self, *args): return _pywraprouting.IntervalVar_EndsAt(self, *args)
    def EndsBefore(self, *args): return _pywraprouting.IntervalVar_EndsBefore(self, *args)
    def StartsAfter(self, *args): return _pywraprouting.IntervalVar_StartsAfter(self, *args)
    def StartsAt(self, *args): return _pywraprouting.IntervalVar_StartsAt(self, *args)
    def StartsBefore(self, *args): return _pywraprouting.IntervalVar_StartsBefore(self, *args)
    def CrossesDate(self, *args): return _pywraprouting.IntervalVar_CrossesDate(self, *args)
    def AvoidsDate(self, *args): return _pywraprouting.IntervalVar_AvoidsDate(self, *args)
IntervalVar_swigregister = _pywraprouting.IntervalVar_swigregister
IntervalVar_swigregister(IntervalVar)
IntervalVar.kMinValidValue = _pywraprouting.cvar.IntervalVar_kMinValidValue
IntervalVar.kMaxValidValue = _pywraprouting.cvar.IntervalVar_kMaxValidValue

class SequenceVar(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceVar, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceVar, name)
    def __init__(self, *args): 
        this = _pywraprouting.new_SequenceVar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_SequenceVar
    __del__ = lambda self : None;
    def DurationRange(self, *args): return _pywraprouting.SequenceVar_DurationRange(self, *args)
    def HorizonRange(self, *args): return _pywraprouting.SequenceVar_HorizonRange(self, *args)
    def ActiveHorizonRange(self, *args): return _pywraprouting.SequenceVar_ActiveHorizonRange(self, *args)
    def ComputeStatistics(self, *args): return _pywraprouting.SequenceVar_ComputeStatistics(self, *args)
    def RankFirst(self, *args): return _pywraprouting.SequenceVar_RankFirst(self, *args)
    def RankNotFirst(self, *args): return _pywraprouting.SequenceVar_RankNotFirst(self, *args)
    def RankLast(self, *args): return _pywraprouting.SequenceVar_RankLast(self, *args)
    def RankNotLast(self, *args): return _pywraprouting.SequenceVar_RankNotLast(self, *args)
    def ComputePossibleFirstsAndLasts(self, *args): return _pywraprouting.SequenceVar_ComputePossibleFirstsAndLasts(self, *args)
    def RankSequence(self, *args): return _pywraprouting.SequenceVar_RankSequence(self, *args)
    def FillSequence(self, *args): return _pywraprouting.SequenceVar_FillSequence(self, *args)
    def Interval(self, *args): return _pywraprouting.SequenceVar_Interval(self, *args)
    def Next(self, *args): return _pywraprouting.SequenceVar_Next(self, *args)
    def size(self): return _pywraprouting.SequenceVar_size(self)
    def Accept(self, *args): return _pywraprouting.SequenceVar_Accept(self, *args)
    def __repr__(self): return _pywraprouting.SequenceVar___repr__(self)
SequenceVar_swigregister = _pywraprouting.SequenceVar_swigregister
SequenceVar_swigregister(SequenceVar)

class SetVar(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetVar, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetVar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_SetVar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_SetVar
    __del__ = lambda self : None;
    def Var(self, *args): return _pywraprouting.SetVar_Var(self, *args)
    def CardVar(self): return _pywraprouting.SetVar_CardVar(self)
    def SetMin(self): return _pywraprouting.SetVar_SetMin(self)
    def SetMax(self): return _pywraprouting.SetVar_SetMax(self)
SetVar_swigregister = _pywraprouting.SetVar_swigregister
SetVar_swigregister(SetVar)

class AssignmentElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentElement, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pywraprouting.new_AssignmentElement()
        try: self.this.append(this)
        except: self.this = this
    def Activate(self): return _pywraprouting.AssignmentElement_Activate(self)
    def Deactivate(self): return _pywraprouting.AssignmentElement_Deactivate(self)
    def Activated(self): return _pywraprouting.AssignmentElement_Activated(self)
    __swig_destroy__ = _pywraprouting.delete_AssignmentElement
    __del__ = lambda self : None;
AssignmentElement_swigregister = _pywraprouting.AssignmentElement_swigregister
AssignmentElement_swigregister(AssignmentElement)

class IntVarElement(AssignmentElement):
    __swig_setmethods__ = {}
    for _s in [AssignmentElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarElement, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_IntVarElement(*args)
        try: self.this.append(this)
        except: self.this = this
    def Reset(self, *args): return _pywraprouting.IntVarElement_Reset(self, *args)
    def Clone(self): return _pywraprouting.IntVarElement_Clone(self)
    def Copy(self, *args): return _pywraprouting.IntVarElement_Copy(self, *args)
    def Var(self): return _pywraprouting.IntVarElement_Var(self)
    def Store(self): return _pywraprouting.IntVarElement_Store(self)
    def Restore(self): return _pywraprouting.IntVarElement_Restore(self)
    def LoadFromProto(self, *args): return _pywraprouting.IntVarElement_LoadFromProto(self, *args)
    def WriteToProto(self, *args): return _pywraprouting.IntVarElement_WriteToProto(self, *args)
    def Min(self): return _pywraprouting.IntVarElement_Min(self)
    def SetMin(self, *args): return _pywraprouting.IntVarElement_SetMin(self, *args)
    def Max(self): return _pywraprouting.IntVarElement_Max(self)
    def SetMax(self, *args): return _pywraprouting.IntVarElement_SetMax(self, *args)
    def Value(self): return _pywraprouting.IntVarElement_Value(self)
    def Bound(self): return _pywraprouting.IntVarElement_Bound(self)
    def SetRange(self, *args): return _pywraprouting.IntVarElement_SetRange(self, *args)
    def SetValue(self, *args): return _pywraprouting.IntVarElement_SetValue(self, *args)
    def DebugString(self): return _pywraprouting.IntVarElement_DebugString(self)
    def __eq__(self, *args): return _pywraprouting.IntVarElement___eq__(self, *args)
    def __ne__(self, *args): return _pywraprouting.IntVarElement___ne__(self, *args)
    __swig_destroy__ = _pywraprouting.delete_IntVarElement
    __del__ = lambda self : None;
IntVarElement_swigregister = _pywraprouting.IntVarElement_swigregister
IntVarElement_swigregister(IntVarElement)

class IntervalVarElement(AssignmentElement):
    __swig_setmethods__ = {}
    for _s in [AssignmentElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalVarElement, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalVarElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_IntervalVarElement(*args)
        try: self.this.append(this)
        except: self.this = this
    def Reset(self, *args): return _pywraprouting.IntervalVarElement_Reset(self, *args)
    def Clone(self): return _pywraprouting.IntervalVarElement_Clone(self)
    def Copy(self, *args): return _pywraprouting.IntervalVarElement_Copy(self, *args)
    def Var(self): return _pywraprouting.IntervalVarElement_Var(self)
    def Store(self): return _pywraprouting.IntervalVarElement_Store(self)
    def Restore(self): return _pywraprouting.IntervalVarElement_Restore(self)
    def LoadFromProto(self, *args): return _pywraprouting.IntervalVarElement_LoadFromProto(self, *args)
    def WriteToProto(self, *args): return _pywraprouting.IntervalVarElement_WriteToProto(self, *args)
    def StartMin(self): return _pywraprouting.IntervalVarElement_StartMin(self)
    def StartMax(self): return _pywraprouting.IntervalVarElement_StartMax(self)
    def StartValue(self): return _pywraprouting.IntervalVarElement_StartValue(self)
    def DurationMin(self): return _pywraprouting.IntervalVarElement_DurationMin(self)
    def DurationMax(self): return _pywraprouting.IntervalVarElement_DurationMax(self)
    def DurationValue(self): return _pywraprouting.IntervalVarElement_DurationValue(self)
    def EndMin(self): return _pywraprouting.IntervalVarElement_EndMin(self)
    def EndMax(self): return _pywraprouting.IntervalVarElement_EndMax(self)
    def EndValue(self): return _pywraprouting.IntervalVarElement_EndValue(self)
    def PerformedMin(self): return _pywraprouting.IntervalVarElement_PerformedMin(self)
    def PerformedMax(self): return _pywraprouting.IntervalVarElement_PerformedMax(self)
    def PerformedValue(self): return _pywraprouting.IntervalVarElement_PerformedValue(self)
    def SetStartMin(self, *args): return _pywraprouting.IntervalVarElement_SetStartMin(self, *args)
    def SetStartMax(self, *args): return _pywraprouting.IntervalVarElement_SetStartMax(self, *args)
    def SetStartRange(self, *args): return _pywraprouting.IntervalVarElement_SetStartRange(self, *args)
    def SetStartValue(self, *args): return _pywraprouting.IntervalVarElement_SetStartValue(self, *args)
    def SetDurationMin(self, *args): return _pywraprouting.IntervalVarElement_SetDurationMin(self, *args)
    def SetDurationMax(self, *args): return _pywraprouting.IntervalVarElement_SetDurationMax(self, *args)
    def SetDurationRange(self, *args): return _pywraprouting.IntervalVarElement_SetDurationRange(self, *args)
    def SetDurationValue(self, *args): return _pywraprouting.IntervalVarElement_SetDurationValue(self, *args)
    def SetEndMin(self, *args): return _pywraprouting.IntervalVarElement_SetEndMin(self, *args)
    def SetEndMax(self, *args): return _pywraprouting.IntervalVarElement_SetEndMax(self, *args)
    def SetEndRange(self, *args): return _pywraprouting.IntervalVarElement_SetEndRange(self, *args)
    def SetEndValue(self, *args): return _pywraprouting.IntervalVarElement_SetEndValue(self, *args)
    def SetPerformedMin(self, *args): return _pywraprouting.IntervalVarElement_SetPerformedMin(self, *args)
    def SetPerformedMax(self, *args): return _pywraprouting.IntervalVarElement_SetPerformedMax(self, *args)
    def SetPerformedRange(self, *args): return _pywraprouting.IntervalVarElement_SetPerformedRange(self, *args)
    def SetPerformedValue(self, *args): return _pywraprouting.IntervalVarElement_SetPerformedValue(self, *args)
    def DebugString(self): return _pywraprouting.IntervalVarElement_DebugString(self)
    def __eq__(self, *args): return _pywraprouting.IntervalVarElement___eq__(self, *args)
    def __ne__(self, *args): return _pywraprouting.IntervalVarElement___ne__(self, *args)
    __swig_destroy__ = _pywraprouting.delete_IntervalVarElement
    __del__ = lambda self : None;
IntervalVarElement_swigregister = _pywraprouting.IntervalVarElement_swigregister
IntervalVarElement_swigregister(IntervalVarElement)

class SequenceVarElement(AssignmentElement):
    __swig_setmethods__ = {}
    for _s in [AssignmentElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceVarElement, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceVarElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_SequenceVarElement(*args)
        try: self.this.append(this)
        except: self.this = this
    def Reset(self, *args): return _pywraprouting.SequenceVarElement_Reset(self, *args)
    def Clone(self): return _pywraprouting.SequenceVarElement_Clone(self)
    def Copy(self, *args): return _pywraprouting.SequenceVarElement_Copy(self, *args)
    def Var(self): return _pywraprouting.SequenceVarElement_Var(self)
    def Store(self): return _pywraprouting.SequenceVarElement_Store(self)
    def Restore(self): return _pywraprouting.SequenceVarElement_Restore(self)
    def LoadFromProto(self, *args): return _pywraprouting.SequenceVarElement_LoadFromProto(self, *args)
    def WriteToProto(self, *args): return _pywraprouting.SequenceVarElement_WriteToProto(self, *args)
    def SetSequence(self, *args): return _pywraprouting.SequenceVarElement_SetSequence(self, *args)
    def SetForwardSequence(self, *args): return _pywraprouting.SequenceVarElement_SetForwardSequence(self, *args)
    def SetBackwardSequence(self, *args): return _pywraprouting.SequenceVarElement_SetBackwardSequence(self, *args)
    def SetUnperformed(self, *args): return _pywraprouting.SequenceVarElement_SetUnperformed(self, *args)
    def DebugString(self): return _pywraprouting.SequenceVarElement_DebugString(self)
    def __eq__(self, *args): return _pywraprouting.SequenceVarElement___eq__(self, *args)
    def __ne__(self, *args): return _pywraprouting.SequenceVarElement___ne__(self, *args)
    __swig_destroy__ = _pywraprouting.delete_SequenceVarElement
    __del__ = lambda self : None;
SequenceVarElement_swigregister = _pywraprouting.SequenceVarElement_swigregister
SequenceVarElement_swigregister(SequenceVarElement)

class Assignment(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Assignment, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Assignment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_Assignment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_Assignment
    __del__ = lambda self : None;
    def Clear(self): return _pywraprouting.Assignment_Clear(self)
    def Empty(self): return _pywraprouting.Assignment_Empty(self)
    def Size(self): return _pywraprouting.Assignment_Size(self)
    def NumIntVars(self): return _pywraprouting.Assignment_NumIntVars(self)
    def NumIntervalVars(self): return _pywraprouting.Assignment_NumIntervalVars(self)
    def NumSequenceVars(self): return _pywraprouting.Assignment_NumSequenceVars(self)
    def Store(self): return _pywraprouting.Assignment_Store(self)
    def Restore(self): return _pywraprouting.Assignment_Restore(self)
    def Load(self, *args): return _pywraprouting.Assignment_Load(self, *args)
    def Save(self, *args): return _pywraprouting.Assignment_Save(self, *args)
    def AddObjective(self, *args): return _pywraprouting.Assignment_AddObjective(self, *args)
    def Objective(self): return _pywraprouting.Assignment_Objective(self)
    def HasObjective(self): return _pywraprouting.Assignment_HasObjective(self)
    def ObjectiveMin(self): return _pywraprouting.Assignment_ObjectiveMin(self)
    def ObjectiveMax(self): return _pywraprouting.Assignment_ObjectiveMax(self)
    def ObjectiveValue(self): return _pywraprouting.Assignment_ObjectiveValue(self)
    def ObjectiveBound(self): return _pywraprouting.Assignment_ObjectiveBound(self)
    def SetObjectiveMin(self, *args): return _pywraprouting.Assignment_SetObjectiveMin(self, *args)
    def SetObjectiveMax(self, *args): return _pywraprouting.Assignment_SetObjectiveMax(self, *args)
    def SetObjectiveValue(self, *args): return _pywraprouting.Assignment_SetObjectiveValue(self, *args)
    def SetObjectiveRange(self, *args): return _pywraprouting.Assignment_SetObjectiveRange(self, *args)
    def Min(self, *args): return _pywraprouting.Assignment_Min(self, *args)
    def Max(self, *args): return _pywraprouting.Assignment_Max(self, *args)
    def Value(self, *args): return _pywraprouting.Assignment_Value(self, *args)
    def Bound(self, *args): return _pywraprouting.Assignment_Bound(self, *args)
    def SetMin(self, *args): return _pywraprouting.Assignment_SetMin(self, *args)
    def SetMax(self, *args): return _pywraprouting.Assignment_SetMax(self, *args)
    def SetRange(self, *args): return _pywraprouting.Assignment_SetRange(self, *args)
    def SetValue(self, *args): return _pywraprouting.Assignment_SetValue(self, *args)
    def StartMin(self, *args): return _pywraprouting.Assignment_StartMin(self, *args)
    def StartMax(self, *args): return _pywraprouting.Assignment_StartMax(self, *args)
    def StartValue(self, *args): return _pywraprouting.Assignment_StartValue(self, *args)
    def DurationMin(self, *args): return _pywraprouting.Assignment_DurationMin(self, *args)
    def DurationMax(self, *args): return _pywraprouting.Assignment_DurationMax(self, *args)
    def DurationValue(self, *args): return _pywraprouting.Assignment_DurationValue(self, *args)
    def EndMin(self, *args): return _pywraprouting.Assignment_EndMin(self, *args)
    def EndMax(self, *args): return _pywraprouting.Assignment_EndMax(self, *args)
    def EndValue(self, *args): return _pywraprouting.Assignment_EndValue(self, *args)
    def PerformedMin(self, *args): return _pywraprouting.Assignment_PerformedMin(self, *args)
    def PerformedMax(self, *args): return _pywraprouting.Assignment_PerformedMax(self, *args)
    def PerformedValue(self, *args): return _pywraprouting.Assignment_PerformedValue(self, *args)
    def SetStartMin(self, *args): return _pywraprouting.Assignment_SetStartMin(self, *args)
    def SetStartMax(self, *args): return _pywraprouting.Assignment_SetStartMax(self, *args)
    def SetStartRange(self, *args): return _pywraprouting.Assignment_SetStartRange(self, *args)
    def SetStartValue(self, *args): return _pywraprouting.Assignment_SetStartValue(self, *args)
    def SetDurationMin(self, *args): return _pywraprouting.Assignment_SetDurationMin(self, *args)
    def SetDurationMax(self, *args): return _pywraprouting.Assignment_SetDurationMax(self, *args)
    def SetDurationRange(self, *args): return _pywraprouting.Assignment_SetDurationRange(self, *args)
    def SetDurationValue(self, *args): return _pywraprouting.Assignment_SetDurationValue(self, *args)
    def SetEndMin(self, *args): return _pywraprouting.Assignment_SetEndMin(self, *args)
    def SetEndMax(self, *args): return _pywraprouting.Assignment_SetEndMax(self, *args)
    def SetEndRange(self, *args): return _pywraprouting.Assignment_SetEndRange(self, *args)
    def SetEndValue(self, *args): return _pywraprouting.Assignment_SetEndValue(self, *args)
    def SetPerformedMin(self, *args): return _pywraprouting.Assignment_SetPerformedMin(self, *args)
    def SetPerformedMax(self, *args): return _pywraprouting.Assignment_SetPerformedMax(self, *args)
    def SetPerformedRange(self, *args): return _pywraprouting.Assignment_SetPerformedRange(self, *args)
    def SetPerformedValue(self, *args): return _pywraprouting.Assignment_SetPerformedValue(self, *args)
    def Add(self, *args): return _pywraprouting.Assignment_Add(self, *args)
    def FastAdd(self, *args): return _pywraprouting.Assignment_FastAdd(self, *args)
    def SetSequence(self, *args): return _pywraprouting.Assignment_SetSequence(self, *args)
    def SetForwardSequence(self, *args): return _pywraprouting.Assignment_SetForwardSequence(self, *args)
    def SetBackwardSequence(self, *args): return _pywraprouting.Assignment_SetBackwardSequence(self, *args)
    def SetUnperformed(self, *args): return _pywraprouting.Assignment_SetUnperformed(self, *args)
    def Activate(self, *args): return _pywraprouting.Assignment_Activate(self, *args)
    def Deactivate(self, *args): return _pywraprouting.Assignment_Deactivate(self, *args)
    def Activated(self, *args): return _pywraprouting.Assignment_Activated(self, *args)
    def ActivateObjective(self): return _pywraprouting.Assignment_ActivateObjective(self)
    def DeactivateObjective(self): return _pywraprouting.Assignment_DeactivateObjective(self)
    def ActivatedObjective(self): return _pywraprouting.Assignment_ActivatedObjective(self)
    def Contains(self, *args): return _pywraprouting.Assignment_Contains(self, *args)
    def Copy(self, *args): return _pywraprouting.Assignment_Copy(self, *args)
    def IntVarContainer(self): return _pywraprouting.Assignment_IntVarContainer(self)
    def MutableIntVarContainer(self): return _pywraprouting.Assignment_MutableIntVarContainer(self)
    def IntervalVarContainer(self): return _pywraprouting.Assignment_IntervalVarContainer(self)
    def MutableIntervalVarContainer(self): return _pywraprouting.Assignment_MutableIntervalVarContainer(self)
    def SequenceVarContainer(self): return _pywraprouting.Assignment_SequenceVarContainer(self)
    def MutableSequenceVarContainer(self): return _pywraprouting.Assignment_MutableSequenceVarContainer(self)
    def __eq__(self, *args): return _pywraprouting.Assignment___eq__(self, *args)
    def __ne__(self, *args): return _pywraprouting.Assignment___ne__(self, *args)
Assignment_swigregister = _pywraprouting.Assignment_swigregister
Assignment_swigregister(Assignment)

class Pack(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pack, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pack, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_Pack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_Pack
    __del__ = lambda self : None;
    def AddWeightedSumLessOrEqualConstantDimension(self, *args): return _pywraprouting.Pack_AddWeightedSumLessOrEqualConstantDimension(self, *args)
    def AddWeightedSumEqualVarDimension(self, *args): return _pywraprouting.Pack_AddWeightedSumEqualVarDimension(self, *args)
    def AddSumVariableWeightsLessOrEqualConstantDimension(self, *args): return _pywraprouting.Pack_AddSumVariableWeightsLessOrEqualConstantDimension(self, *args)
    def AddWeightedSumOfAssignedDimension(self, *args): return _pywraprouting.Pack_AddWeightedSumOfAssignedDimension(self, *args)
    def AddCountUsedBinDimension(self, *args): return _pywraprouting.Pack_AddCountUsedBinDimension(self, *args)
    def AddCountAssignedItemsDimension(self, *args): return _pywraprouting.Pack_AddCountAssignedItemsDimension(self, *args)
    def Post(self): return _pywraprouting.Pack_Post(self)
    def ClearAll(self): return _pywraprouting.Pack_ClearAll(self)
    def PropagateDelayed(self): return _pywraprouting.Pack_PropagateDelayed(self)
    def InitialPropagate(self): return _pywraprouting.Pack_InitialPropagate(self)
    def Propagate(self): return _pywraprouting.Pack_Propagate(self)
    def OneDomain(self, *args): return _pywraprouting.Pack_OneDomain(self, *args)
    def IsUndecided(self, *args): return _pywraprouting.Pack_IsUndecided(self, *args)
    def SetImpossible(self, *args): return _pywraprouting.Pack_SetImpossible(self, *args)
    def Assign(self, *args): return _pywraprouting.Pack_Assign(self, *args)
    def IsAssignedStatusKnown(self, *args): return _pywraprouting.Pack_IsAssignedStatusKnown(self, *args)
    def IsPossible(self, *args): return _pywraprouting.Pack_IsPossible(self, *args)
    def AssignVar(self, *args): return _pywraprouting.Pack_AssignVar(self, *args)
    def SetAssigned(self, *args): return _pywraprouting.Pack_SetAssigned(self, *args)
    def SetUnassigned(self, *args): return _pywraprouting.Pack_SetUnassigned(self, *args)
    def RemoveAllPossibleFromBin(self, *args): return _pywraprouting.Pack_RemoveAllPossibleFromBin(self, *args)
    def AssignAllPossibleToBin(self, *args): return _pywraprouting.Pack_AssignAllPossibleToBin(self, *args)
    def AssignFirstPossibleToBin(self, *args): return _pywraprouting.Pack_AssignFirstPossibleToBin(self, *args)
    def AssignAllRemainingItems(self): return _pywraprouting.Pack_AssignAllRemainingItems(self)
    def UnassignAllRemainingItems(self): return _pywraprouting.Pack_UnassignAllRemainingItems(self)
    def Accept(self, *args): return _pywraprouting.Pack_Accept(self, *args)
Pack_swigregister = _pywraprouting.Pack_swigregister
Pack_swigregister(Pack)

def __lshift__(*args):
  return _pywraprouting.__lshift__(*args)
__lshift__ = _pywraprouting.__lshift__

class DisjunctiveConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisjunctiveConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisjunctiveConstraint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_DisjunctiveConstraint
    __del__ = lambda self : None;
    def SequenceVar(self): return _pywraprouting.DisjunctiveConstraint_SequenceVar(self)
DisjunctiveConstraint_swigregister = _pywraprouting.DisjunctiveConstraint_swigregister
DisjunctiveConstraint_swigregister(DisjunctiveConstraint)

class SolutionPool(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolutionPool, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SolutionPool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_SolutionPool
    __del__ = lambda self : None;
    def Initialize(self, *args): return _pywraprouting.SolutionPool_Initialize(self, *args)
    def RegisterNewSolution(self, *args): return _pywraprouting.SolutionPool_RegisterNewSolution(self, *args)
    def GetNextSolution(self, *args): return _pywraprouting.SolutionPool_GetNextSolution(self, *args)
    def SyncNeeded(self, *args): return _pywraprouting.SolutionPool_SyncNeeded(self, *args)
SolutionPool_swigregister = _pywraprouting.SolutionPool_swigregister
SolutionPool_swigregister(SolutionPool)

class BaseIntExpr(IntExpr):
    __swig_setmethods__ = {}
    for _s in [IntExpr]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseIntExpr, name, value)
    __swig_getmethods__ = {}
    for _s in [IntExpr]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseIntExpr, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_BaseIntExpr
    __del__ = lambda self : None;
    def Var(self): return _pywraprouting.BaseIntExpr_Var(self)
    def CastToVar(self): return _pywraprouting.BaseIntExpr_CastToVar(self)
BaseIntExpr_swigregister = _pywraprouting.BaseIntExpr_swigregister
BaseIntExpr_swigregister(BaseIntExpr)

UNSPECIFIED = _pywraprouting.UNSPECIFIED
DOMAIN_INT_VAR = _pywraprouting.DOMAIN_INT_VAR
BOOLEAN_VAR = _pywraprouting.BOOLEAN_VAR
CONST_VAR = _pywraprouting.CONST_VAR
VAR_ADD_CST = _pywraprouting.VAR_ADD_CST
VAR_TIMES_CST = _pywraprouting.VAR_TIMES_CST
CST_SUB_VAR = _pywraprouting.CST_SUB_VAR
OPP_VAR = _pywraprouting.OPP_VAR
TRACE_VAR = _pywraprouting.TRACE_VAR
class LocalSearchOperator(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalSearchOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalSearchOperator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_LocalSearchOperator
    __del__ = lambda self : None;
    def NextNeighbor(self, *args): return _pywraprouting.LocalSearchOperator_NextNeighbor(self, *args)
    def Start(self, *args): return _pywraprouting.LocalSearchOperator_Start(self, *args)
LocalSearchOperator_swigregister = _pywraprouting.LocalSearchOperator_swigregister
LocalSearchOperator_swigregister(LocalSearchOperator)

class IntVarLocalSearchOperator(LocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [LocalSearchOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarLocalSearchOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalSearchOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarLocalSearchOperator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_IntVarLocalSearchOperator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_IntVarLocalSearchOperator
    __del__ = lambda self : None;
    def Start(self, *args): return _pywraprouting.IntVarLocalSearchOperator_Start(self, *args)
    def IsIncremental(self): return _pywraprouting.IntVarLocalSearchOperator_IsIncremental(self)
    def Size(self): return _pywraprouting.IntVarLocalSearchOperator_Size(self)
    def Value(self, *args): return _pywraprouting.IntVarLocalSearchOperator_Value(self, *args)
    def Var(self, *args): return _pywraprouting.IntVarLocalSearchOperator_Var(self, *args)
    def SkipUnchanged(self, *args): return _pywraprouting.IntVarLocalSearchOperator_SkipUnchanged(self, *args)
    def NextNeighbor(self, *args): return _pywraprouting.IntVarLocalSearchOperator_NextNeighbor(self, *args)
    def OldValue(self, *args): return _pywraprouting.IntVarLocalSearchOperator_OldValue(self, *args)
    def SetValue(self, *args): return _pywraprouting.IntVarLocalSearchOperator_SetValue(self, *args)
    def Activated(self, *args): return _pywraprouting.IntVarLocalSearchOperator_Activated(self, *args)
    def Activate(self, *args): return _pywraprouting.IntVarLocalSearchOperator_Activate(self, *args)
    def Deactivate(self, *args): return _pywraprouting.IntVarLocalSearchOperator_Deactivate(self, *args)
    def ApplyChanges(self, *args): return _pywraprouting.IntVarLocalSearchOperator_ApplyChanges(self, *args)
    def RevertChanges(self, *args): return _pywraprouting.IntVarLocalSearchOperator_RevertChanges(self, *args)
IntVarLocalSearchOperator_swigregister = _pywraprouting.IntVarLocalSearchOperator_swigregister
IntVarLocalSearchOperator_swigregister(IntVarLocalSearchOperator)

class SequenceVarLocalSearchOperator(LocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [LocalSearchOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceVarLocalSearchOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalSearchOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceVarLocalSearchOperator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_SequenceVarLocalSearchOperator
    __del__ = lambda self : None;
    def Start(self, *args): return _pywraprouting.SequenceVarLocalSearchOperator_Start(self, *args)
    def IsIncremental(self): return _pywraprouting.SequenceVarLocalSearchOperator_IsIncremental(self)
    def Size(self): return _pywraprouting.SequenceVarLocalSearchOperator_Size(self)
    def Var(self, *args): return _pywraprouting.SequenceVarLocalSearchOperator_Var(self, *args)
    def SkipUnchanged(self, *args): return _pywraprouting.SequenceVarLocalSearchOperator_SkipUnchanged(self, *args)
SequenceVarLocalSearchOperator_swigregister = _pywraprouting.SequenceVarLocalSearchOperator_swigregister
SequenceVarLocalSearchOperator_swigregister(SequenceVarLocalSearchOperator)

class BaseLNS(IntVarLocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [IntVarLocalSearchOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseLNS, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarLocalSearchOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseLNS, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_BaseLNS
    __del__ = lambda self : None;
    def InitFragments(self): return _pywraprouting.BaseLNS_InitFragments(self)
    def NextFragment(self, *args): return _pywraprouting.BaseLNS_NextFragment(self, *args)
    def __getitem__(self, *args): return _pywraprouting.BaseLNS___getitem__(self, *args)
    def __len__(self): return _pywraprouting.BaseLNS___len__(self)
BaseLNS_swigregister = _pywraprouting.BaseLNS_swigregister
BaseLNS_swigregister(BaseLNS)

class ChangeValue(IntVarLocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [IntVarLocalSearchOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChangeValue, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarLocalSearchOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChangeValue, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_ChangeValue
    __del__ = lambda self : None;
    def ModifyValue(self, *args): return _pywraprouting.ChangeValue_ModifyValue(self, *args)
ChangeValue_swigregister = _pywraprouting.ChangeValue_swigregister
ChangeValue_swigregister(ChangeValue)

class PathOperator(IntVarLocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [IntVarLocalSearchOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarLocalSearchOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathOperator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_PathOperator
    __del__ = lambda self : None;
    def Neighbor(self): return _pywraprouting.PathOperator_Neighbor(self)
    def SkipUnchanged(self, *args): return _pywraprouting.PathOperator_SkipUnchanged(self, *args)
    def Next(self, *args): return _pywraprouting.PathOperator_Next(self, *args)
    def Path(self, *args): return _pywraprouting.PathOperator_Path(self, *args)
    def number_of_nexts(self): return _pywraprouting.PathOperator_number_of_nexts(self)
PathOperator_swigregister = _pywraprouting.PathOperator_swigregister
PathOperator_swigregister(PathOperator)

class LocalSearchFilter(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalSearchFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalSearchFilter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Accept(self, *args): return _pywraprouting.LocalSearchFilter_Accept(self, *args)
    def Synchronize(self, *args): return _pywraprouting.LocalSearchFilter_Synchronize(self, *args)
    def IsIncremental(self): return _pywraprouting.LocalSearchFilter_IsIncremental(self)
    __swig_destroy__ = _pywraprouting.delete_LocalSearchFilter
    __del__ = lambda self : None;
LocalSearchFilter_swigregister = _pywraprouting.LocalSearchFilter_swigregister
LocalSearchFilter_swigregister(LocalSearchFilter)

class IntVarLocalSearchFilter(LocalSearchFilter):
    __swig_setmethods__ = {}
    for _s in [LocalSearchFilter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarLocalSearchFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalSearchFilter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarLocalSearchFilter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_IntVarLocalSearchFilter
    __del__ = lambda self : None;
    def Synchronize(self, *args): return _pywraprouting.IntVarLocalSearchFilter_Synchronize(self, *args)
    def FindIndex(self, *args): return _pywraprouting.IntVarLocalSearchFilter_FindIndex(self, *args)
    def Size(self): return _pywraprouting.IntVarLocalSearchFilter_Size(self)
    def Var(self, *args): return _pywraprouting.IntVarLocalSearchFilter_Var(self, *args)
    def Value(self, *args): return _pywraprouting.IntVarLocalSearchFilter_Value(self, *args)
IntVarLocalSearchFilter_swigregister = _pywraprouting.IntVarLocalSearchFilter_swigregister
IntVarLocalSearchFilter_swigregister(IntVarLocalSearchFilter)

class PropagationMonitor(SearchMonitor):
    __swig_setmethods__ = {}
    for _s in [SearchMonitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropagationMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchMonitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropagationMonitor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraprouting.delete_PropagationMonitor
    __del__ = lambda self : None;
    def BeginConstraintInitialPropagation(self, *args): return _pywraprouting.PropagationMonitor_BeginConstraintInitialPropagation(self, *args)
    def EndConstraintInitialPropagation(self, *args): return _pywraprouting.PropagationMonitor_EndConstraintInitialPropagation(self, *args)
    def BeginNestedConstraintInitialPropagation(self, *args): return _pywraprouting.PropagationMonitor_BeginNestedConstraintInitialPropagation(self, *args)
    def EndNestedConstraintInitialPropagation(self, *args): return _pywraprouting.PropagationMonitor_EndNestedConstraintInitialPropagation(self, *args)
    def RegisterDemon(self, *args): return _pywraprouting.PropagationMonitor_RegisterDemon(self, *args)
    def BeginDemonRun(self, *args): return _pywraprouting.PropagationMonitor_BeginDemonRun(self, *args)
    def EndDemonRun(self, *args): return _pywraprouting.PropagationMonitor_EndDemonRun(self, *args)
    def StartProcessingIntegerVariable(self, *args): return _pywraprouting.PropagationMonitor_StartProcessingIntegerVariable(self, *args)
    def EndProcessingIntegerVariable(self, *args): return _pywraprouting.PropagationMonitor_EndProcessingIntegerVariable(self, *args)
    def PushContext(self, *args): return _pywraprouting.PropagationMonitor_PushContext(self, *args)
    def PopContext(self): return _pywraprouting.PropagationMonitor_PopContext(self)
    def SetMin(self, *args): return _pywraprouting.PropagationMonitor_SetMin(self, *args)
    def SetMax(self, *args): return _pywraprouting.PropagationMonitor_SetMax(self, *args)
    def SetRange(self, *args): return _pywraprouting.PropagationMonitor_SetRange(self, *args)
    def RemoveValue(self, *args): return _pywraprouting.PropagationMonitor_RemoveValue(self, *args)
    def SetValue(self, *args): return _pywraprouting.PropagationMonitor_SetValue(self, *args)
    def RemoveInterval(self, *args): return _pywraprouting.PropagationMonitor_RemoveInterval(self, *args)
    def SetValues(self, *args): return _pywraprouting.PropagationMonitor_SetValues(self, *args)
    def RemoveValues(self, *args): return _pywraprouting.PropagationMonitor_RemoveValues(self, *args)
    def SetStartMin(self, *args): return _pywraprouting.PropagationMonitor_SetStartMin(self, *args)
    def SetStartMax(self, *args): return _pywraprouting.PropagationMonitor_SetStartMax(self, *args)
    def SetStartRange(self, *args): return _pywraprouting.PropagationMonitor_SetStartRange(self, *args)
    def SetEndMin(self, *args): return _pywraprouting.PropagationMonitor_SetEndMin(self, *args)
    def SetEndMax(self, *args): return _pywraprouting.PropagationMonitor_SetEndMax(self, *args)
    def SetEndRange(self, *args): return _pywraprouting.PropagationMonitor_SetEndRange(self, *args)
    def SetDurationMin(self, *args): return _pywraprouting.PropagationMonitor_SetDurationMin(self, *args)
    def SetDurationMax(self, *args): return _pywraprouting.PropagationMonitor_SetDurationMax(self, *args)
    def SetDurationRange(self, *args): return _pywraprouting.PropagationMonitor_SetDurationRange(self, *args)
    def SetPerformed(self, *args): return _pywraprouting.PropagationMonitor_SetPerformed(self, *args)
    def RankFirst(self, *args): return _pywraprouting.PropagationMonitor_RankFirst(self, *args)
    def RankNotFirst(self, *args): return _pywraprouting.PropagationMonitor_RankNotFirst(self, *args)
    def RankLast(self, *args): return _pywraprouting.PropagationMonitor_RankLast(self, *args)
    def RankNotLast(self, *args): return _pywraprouting.PropagationMonitor_RankNotLast(self, *args)
    def RankSequence(self, *args): return _pywraprouting.PropagationMonitor_RankSequence(self, *args)
    def Install(self): return _pywraprouting.PropagationMonitor_Install(self)
PropagationMonitor_swigregister = _pywraprouting.PropagationMonitor_swigregister
PropagationMonitor_swigregister(PropagationMonitor)


def AddOverflows(*args):
  return _pywraprouting.AddOverflows(*args)
AddOverflows = _pywraprouting.AddOverflows

def AddUnderflows(*args):
  return _pywraprouting.AddUnderflows(*args)
AddUnderflows = _pywraprouting.AddUnderflows

def CapAdd(*args):
  return _pywraprouting.CapAdd(*args)
CapAdd = _pywraprouting.CapAdd

def SubOverflows(*args):
  return _pywraprouting.SubOverflows(*args)
SubOverflows = _pywraprouting.SubOverflows

def SubUnderflows(*args):
  return _pywraprouting.SubUnderflows(*args)
SubUnderflows = _pywraprouting.SubUnderflows

def CapSub(*args):
  return _pywraprouting.CapSub(*args)
CapSub = _pywraprouting.CapSub

def CapProd(*args):
  return _pywraprouting.CapProd(*args)
CapProd = _pywraprouting.CapProd
class SymmetryBreaker(DecisionVisitor):
    __swig_setmethods__ = {}
    for _s in [DecisionVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymmetryBreaker, name, value)
    __swig_getmethods__ = {}
    for _s in [DecisionVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SymmetryBreaker, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pywraprouting.new_SymmetryBreaker()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_SymmetryBreaker
    __del__ = lambda self : None;
    def AddIntegerVariableEqualValueClause(self, *args): return _pywraprouting.SymmetryBreaker_AddIntegerVariableEqualValueClause(self, *args)
    def AddIntegerVariableGreaterOrEqualValueClause(self, *args): return _pywraprouting.SymmetryBreaker_AddIntegerVariableGreaterOrEqualValueClause(self, *args)
    def AddIntegerVariableLessOrEqualValueClause(self, *args): return _pywraprouting.SymmetryBreaker_AddIntegerVariableLessOrEqualValueClause(self, *args)
SymmetryBreaker_swigregister = _pywraprouting.SymmetryBreaker_swigregister
SymmetryBreaker_swigregister(SymmetryBreaker)

class SearchLog(SearchMonitor):
    __swig_setmethods__ = {}
    for _s in [SearchMonitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchLog, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchMonitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SearchLog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_SearchLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_SearchLog
    __del__ = lambda self : None;
    def EnterSearch(self): return _pywraprouting.SearchLog_EnterSearch(self)
    def ExitSearch(self): return _pywraprouting.SearchLog_ExitSearch(self)
    def AtSolution(self): return _pywraprouting.SearchLog_AtSolution(self)
    def BeginFail(self): return _pywraprouting.SearchLog_BeginFail(self)
    def NoMoreSolutions(self): return _pywraprouting.SearchLog_NoMoreSolutions(self)
    def ApplyDecision(self, *args): return _pywraprouting.SearchLog_ApplyDecision(self, *args)
    def RefuteDecision(self, *args): return _pywraprouting.SearchLog_RefuteDecision(self, *args)
    def OutputDecision(self): return _pywraprouting.SearchLog_OutputDecision(self)
    def Maintain(self): return _pywraprouting.SearchLog_Maintain(self)
    def BeginInitialPropagation(self): return _pywraprouting.SearchLog_BeginInitialPropagation(self)
    def EndInitialPropagation(self): return _pywraprouting.SearchLog_EndInitialPropagation(self)
SearchLog_swigregister = _pywraprouting.SearchLog_swigregister
SearchLog_swigregister(SearchLog)

class ModelCache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelCache, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VOID_FALSE_CONSTRAINT = _pywraprouting.ModelCache_VOID_FALSE_CONSTRAINT
    VOID_TRUE_CONSTRAINT = _pywraprouting.ModelCache_VOID_TRUE_CONSTRAINT
    VOID_CONSTRAINT_MAX = _pywraprouting.ModelCache_VOID_CONSTRAINT_MAX
    VAR_CONSTANT_EQUALITY = _pywraprouting.ModelCache_VAR_CONSTANT_EQUALITY
    VAR_CONSTANT_GREATER_OR_EQUAL = _pywraprouting.ModelCache_VAR_CONSTANT_GREATER_OR_EQUAL
    VAR_CONSTANT_LESS_OR_EQUAL = _pywraprouting.ModelCache_VAR_CONSTANT_LESS_OR_EQUAL
    VAR_CONSTANT_NON_EQUALITY = _pywraprouting.ModelCache_VAR_CONSTANT_NON_EQUALITY
    VAR_CONSTANT_CONSTRAINT_MAX = _pywraprouting.ModelCache_VAR_CONSTANT_CONSTRAINT_MAX
    VAR_CONSTANT_CONSTANT_BETWEEN = _pywraprouting.ModelCache_VAR_CONSTANT_CONSTANT_BETWEEN
    VAR_CONSTANT_CONSTANT_CONSTRAINT_MAX = _pywraprouting.ModelCache_VAR_CONSTANT_CONSTANT_CONSTRAINT_MAX
    EXPR_EXPR_EQUALITY = _pywraprouting.ModelCache_EXPR_EXPR_EQUALITY
    EXPR_EXPR_GREATER = _pywraprouting.ModelCache_EXPR_EXPR_GREATER
    EXPR_EXPR_GREATER_OR_EQUAL = _pywraprouting.ModelCache_EXPR_EXPR_GREATER_OR_EQUAL
    EXPR_EXPR_LESS = _pywraprouting.ModelCache_EXPR_EXPR_LESS
    EXPR_EXPR_LESS_OR_EQUAL = _pywraprouting.ModelCache_EXPR_EXPR_LESS_OR_EQUAL
    EXPR_EXPR_NON_EQUALITY = _pywraprouting.ModelCache_EXPR_EXPR_NON_EQUALITY
    EXPR_EXPR_CONSTRAINT_MAX = _pywraprouting.ModelCache_EXPR_EXPR_CONSTRAINT_MAX
    EXPR_OPPOSITE = _pywraprouting.ModelCache_EXPR_OPPOSITE
    EXPR_ABS = _pywraprouting.ModelCache_EXPR_ABS
    EXPR_SQUARE = _pywraprouting.ModelCache_EXPR_SQUARE
    EXPR_EXPRESSION_MAX = _pywraprouting.ModelCache_EXPR_EXPRESSION_MAX
    EXPR_EXPR_DIFFERENCE = _pywraprouting.ModelCache_EXPR_EXPR_DIFFERENCE
    EXPR_EXPR_PROD = _pywraprouting.ModelCache_EXPR_EXPR_PROD
    EXPR_EXPR_MAX = _pywraprouting.ModelCache_EXPR_EXPR_MAX
    EXPR_EXPR_MIN = _pywraprouting.ModelCache_EXPR_EXPR_MIN
    EXPR_EXPR_SUM = _pywraprouting.ModelCache_EXPR_EXPR_SUM
    EXPR_EXPR_IS_LESS = _pywraprouting.ModelCache_EXPR_EXPR_IS_LESS
    EXPR_EXPR_IS_LESS_OR_EQUAL = _pywraprouting.ModelCache_EXPR_EXPR_IS_LESS_OR_EQUAL
    EXPR_EXPR_IS_EQUAL = _pywraprouting.ModelCache_EXPR_EXPR_IS_EQUAL
    EXPR_EXPR_IS_NOT_EQUAL = _pywraprouting.ModelCache_EXPR_EXPR_IS_NOT_EQUAL
    EXPR_EXPR_EXPRESSION_MAX = _pywraprouting.ModelCache_EXPR_EXPR_EXPRESSION_MAX
    EXPR_CONSTANT_DIFFERENCE = _pywraprouting.ModelCache_EXPR_CONSTANT_DIFFERENCE
    EXPR_CONSTANT_DIVIDE = _pywraprouting.ModelCache_EXPR_CONSTANT_DIVIDE
    EXPR_CONSTANT_PROD = _pywraprouting.ModelCache_EXPR_CONSTANT_PROD
    EXPR_CONSTANT_MAX = _pywraprouting.ModelCache_EXPR_CONSTANT_MAX
    EXPR_CONSTANT_MIN = _pywraprouting.ModelCache_EXPR_CONSTANT_MIN
    EXPR_CONSTANT_SUM = _pywraprouting.ModelCache_EXPR_CONSTANT_SUM
    EXPR_CONSTANT_IS_EQUAL = _pywraprouting.ModelCache_EXPR_CONSTANT_IS_EQUAL
    EXPR_CONSTANT_IS_NOT_EQUAL = _pywraprouting.ModelCache_EXPR_CONSTANT_IS_NOT_EQUAL
    EXPR_CONSTANT_IS_GREATER_OR_EQUAL = _pywraprouting.ModelCache_EXPR_CONSTANT_IS_GREATER_OR_EQUAL
    EXPR_CONSTANT_IS_LESS_OR_EQUAL = _pywraprouting.ModelCache_EXPR_CONSTANT_IS_LESS_OR_EQUAL
    EXPR_CONSTANT_EXPRESSION_MAX = _pywraprouting.ModelCache_EXPR_CONSTANT_EXPRESSION_MAX
    VAR_CONSTANT_CONSTANT_SEMI_CONTINUOUS = _pywraprouting.ModelCache_VAR_CONSTANT_CONSTANT_SEMI_CONTINUOUS
    VAR_CONSTANT_CONSTANT_EXPRESSION_MAX = _pywraprouting.ModelCache_VAR_CONSTANT_CONSTANT_EXPRESSION_MAX
    VAR_CONSTANT_ARRAY_ELEMENT = _pywraprouting.ModelCache_VAR_CONSTANT_ARRAY_ELEMENT
    VAR_CONSTANT_ARRAY_EXPRESSION_MAX = _pywraprouting.ModelCache_VAR_CONSTANT_ARRAY_EXPRESSION_MAX
    VAR_ARRAY_CONSTANT_ARRAY_SCAL_PROD = _pywraprouting.ModelCache_VAR_ARRAY_CONSTANT_ARRAY_SCAL_PROD
    VAR_ARRAY_CONSTANT_ARRAY_EXPRESSION_MAX = _pywraprouting.ModelCache_VAR_ARRAY_CONSTANT_ARRAY_EXPRESSION_MAX
    VAR_ARRAY_MAX = _pywraprouting.ModelCache_VAR_ARRAY_MAX
    VAR_ARRAY_MIN = _pywraprouting.ModelCache_VAR_ARRAY_MIN
    VAR_ARRAY_SUM = _pywraprouting.ModelCache_VAR_ARRAY_SUM
    VAR_ARRAY_EXPRESSION_MAX = _pywraprouting.ModelCache_VAR_ARRAY_EXPRESSION_MAX
    VAR_ARRAY_CONSTANT_INDEX = _pywraprouting.ModelCache_VAR_ARRAY_CONSTANT_INDEX
    VAR_ARRAY_CONSTANT_EXPRESSION_MAX = _pywraprouting.ModelCache_VAR_ARRAY_CONSTANT_EXPRESSION_MAX
    __swig_destroy__ = _pywraprouting.delete_ModelCache
    __del__ = lambda self : None;
    def FindVoidConstraint(self, *args): return _pywraprouting.ModelCache_FindVoidConstraint(self, *args)
    def InsertVoidConstraint(self, *args): return _pywraprouting.ModelCache_InsertVoidConstraint(self, *args)
    def FindVarConstantConstraint(self, *args): return _pywraprouting.ModelCache_FindVarConstantConstraint(self, *args)
    def InsertVarConstantConstraint(self, *args): return _pywraprouting.ModelCache_InsertVarConstantConstraint(self, *args)
    def FindVarConstantConstantConstraint(self, *args): return _pywraprouting.ModelCache_FindVarConstantConstantConstraint(self, *args)
    def InsertVarConstantConstantConstraint(self, *args): return _pywraprouting.ModelCache_InsertVarConstantConstantConstraint(self, *args)
    def FindExprExprConstraint(self, *args): return _pywraprouting.ModelCache_FindExprExprConstraint(self, *args)
    def InsertExprExprConstraint(self, *args): return _pywraprouting.ModelCache_InsertExprExprConstraint(self, *args)
    def FindExprExpression(self, *args): return _pywraprouting.ModelCache_FindExprExpression(self, *args)
    def InsertExprExpression(self, *args): return _pywraprouting.ModelCache_InsertExprExpression(self, *args)
    def FindExprConstantExpression(self, *args): return _pywraprouting.ModelCache_FindExprConstantExpression(self, *args)
    def InsertExprConstantExpression(self, *args): return _pywraprouting.ModelCache_InsertExprConstantExpression(self, *args)
    def FindExprExprExpression(self, *args): return _pywraprouting.ModelCache_FindExprExprExpression(self, *args)
    def InsertExprExprExpression(self, *args): return _pywraprouting.ModelCache_InsertExprExprExpression(self, *args)
    def FindVarConstantConstantExpression(self, *args): return _pywraprouting.ModelCache_FindVarConstantConstantExpression(self, *args)
    def InsertVarConstantConstantExpression(self, *args): return _pywraprouting.ModelCache_InsertVarConstantConstantExpression(self, *args)
    def FindVarConstantArrayExpression(self, *args): return _pywraprouting.ModelCache_FindVarConstantArrayExpression(self, *args)
    def InsertVarConstantArrayExpression(self, *args): return _pywraprouting.ModelCache_InsertVarConstantArrayExpression(self, *args)
    def FindVarArrayExpression(self, *args): return _pywraprouting.ModelCache_FindVarArrayExpression(self, *args)
    def InsertVarArrayExpression(self, *args): return _pywraprouting.ModelCache_InsertVarArrayExpression(self, *args)
    def FindVarArrayConstantArrayExpression(self, *args): return _pywraprouting.ModelCache_FindVarArrayConstantArrayExpression(self, *args)
    def InsertVarArrayConstantArrayExpression(self, *args): return _pywraprouting.ModelCache_InsertVarArrayConstantArrayExpression(self, *args)
    def FindVarArrayConstantExpression(self, *args): return _pywraprouting.ModelCache_FindVarArrayConstantExpression(self, *args)
    def InsertVarArrayConstantExpression(self, *args): return _pywraprouting.ModelCache_InsertVarArrayConstantExpression(self, *args)
    def solver(self): return _pywraprouting.ModelCache_solver(self)
ModelCache_swigregister = _pywraprouting.ModelCache_swigregister
ModelCache_swigregister(ModelCache)

class RevPartialSequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RevPartialSequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RevPartialSequence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_RevPartialSequence(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_RevPartialSequence
    __del__ = lambda self : None;
    def FirstRanked(self): return _pywraprouting.RevPartialSequence_FirstRanked(self)
    def LastRanked(self): return _pywraprouting.RevPartialSequence_LastRanked(self)
    def Size(self): return _pywraprouting.RevPartialSequence_Size(self)
    def RankFirst(self, *args): return _pywraprouting.RevPartialSequence_RankFirst(self, *args)
    def RankLast(self, *args): return _pywraprouting.RevPartialSequence_RankLast(self, *args)
    def IsRanked(self, *args): return _pywraprouting.RevPartialSequence_IsRanked(self, *args)
    def DebugString(self): return _pywraprouting.RevPartialSequence_DebugString(self)
RevPartialSequence_swigregister = _pywraprouting.RevPartialSequence_swigregister
RevPartialSequence_swigregister(RevPartialSequence)

class RevInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RevInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RevInteger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_RevInteger(*args)
        try: self.this.append(this)
        except: self.this = this
    def Value(self): return _pywraprouting.RevInteger_Value(self)
    def SetValue(self, *args): return _pywraprouting.RevInteger_SetValue(self, *args)
    __swig_destroy__ = _pywraprouting.delete_RevInteger
    __del__ = lambda self : None;
RevInteger_swigregister = _pywraprouting.RevInteger_swigregister
RevInteger_swigregister(RevInteger)

class RevBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RevBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RevBool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywraprouting.new_RevBool(*args)
        try: self.this.append(this)
        except: self.this = this
    def Value(self): return _pywraprouting.RevBool_Value(self)
    def SetValue(self, *args): return _pywraprouting.RevBool_SetValue(self, *args)
    __swig_destroy__ = _pywraprouting.delete_RevBool
    __del__ = lambda self : None;
RevBool_swigregister = _pywraprouting.RevBool_swigregister
RevBool_swigregister(RevBool)

class AssignmentIntContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentIntContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentIntContainer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pywraprouting.new_AssignmentIntContainer()
        try: self.this.append(this)
        except: self.this = this
    def Add(self, *args): return _pywraprouting.AssignmentIntContainer_Add(self, *args)
    def FastAdd(self, *args): return _pywraprouting.AssignmentIntContainer_FastAdd(self, *args)
    def Clear(self): return _pywraprouting.AssignmentIntContainer_Clear(self)
    def Empty(self): return _pywraprouting.AssignmentIntContainer_Empty(self)
    def Copy(self, *args): return _pywraprouting.AssignmentIntContainer_Copy(self, *args)
    def Contains(self, *args): return _pywraprouting.AssignmentIntContainer_Contains(self, *args)
    def elements(self): return _pywraprouting.AssignmentIntContainer_elements(self)
    def MutableElement(self, *args): return _pywraprouting.AssignmentIntContainer_MutableElement(self, *args)
    def Element(self, *args): return _pywraprouting.AssignmentIntContainer_Element(self, *args)
    def Size(self): return _pywraprouting.AssignmentIntContainer_Size(self)
    def Store(self): return _pywraprouting.AssignmentIntContainer_Store(self)
    def Restore(self): return _pywraprouting.AssignmentIntContainer_Restore(self)
    def __eq__(self, *args): return _pywraprouting.AssignmentIntContainer___eq__(self, *args)
    def __ne__(self, *args): return _pywraprouting.AssignmentIntContainer___ne__(self, *args)
    __swig_destroy__ = _pywraprouting.delete_AssignmentIntContainer
    __del__ = lambda self : None;
AssignmentIntContainer_swigregister = _pywraprouting.AssignmentIntContainer_swigregister
AssignmentIntContainer_swigregister(AssignmentIntContainer)

class RoutingModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingModel, name)
    __repr__ = _swig_repr
    ROUTING_DEFAULT_STRATEGY = _pywraprouting.RoutingModel_ROUTING_DEFAULT_STRATEGY
    ROUTING_GLOBAL_CHEAPEST_ARC = _pywraprouting.RoutingModel_ROUTING_GLOBAL_CHEAPEST_ARC
    ROUTING_LOCAL_CHEAPEST_ARC = _pywraprouting.RoutingModel_ROUTING_LOCAL_CHEAPEST_ARC
    ROUTING_PATH_CHEAPEST_ARC = _pywraprouting.RoutingModel_ROUTING_PATH_CHEAPEST_ARC
    ROUTING_EVALUATOR_STRATEGY = _pywraprouting.RoutingModel_ROUTING_EVALUATOR_STRATEGY
    ROUTING_ALL_UNPERFORMED = _pywraprouting.RoutingModel_ROUTING_ALL_UNPERFORMED
    ROUTING_BEST_INSERTION = _pywraprouting.RoutingModel_ROUTING_BEST_INSERTION
    ROUTING_GREEDY_DESCENT = _pywraprouting.RoutingModel_ROUTING_GREEDY_DESCENT
    ROUTING_GUIDED_LOCAL_SEARCH = _pywraprouting.RoutingModel_ROUTING_GUIDED_LOCAL_SEARCH
    ROUTING_SIMULATED_ANNEALING = _pywraprouting.RoutingModel_ROUTING_SIMULATED_ANNEALING
    ROUTING_TABU_SEARCH = _pywraprouting.RoutingModel_ROUTING_TABU_SEARCH
    ROUTING_NOT_SOLVED = _pywraprouting.RoutingModel_ROUTING_NOT_SOLVED
    ROUTING_SUCCESS = _pywraprouting.RoutingModel_ROUTING_SUCCESS
    ROUTING_FAIL = _pywraprouting.RoutingModel_ROUTING_FAIL
    ROUTING_FAIL_TIMEOUT = _pywraprouting.RoutingModel_ROUTING_FAIL_TIMEOUT
    def __init__(self, *args): 
        this = _pywraprouting.new_RoutingModel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraprouting.delete_RoutingModel
    __del__ = lambda self : None;
    def AddDimension(self, *args): return _pywraprouting.RoutingModel_AddDimension(self, *args)
    def AddConstantDimension(self, *args): return _pywraprouting.RoutingModel_AddConstantDimension(self, *args)
    def AddAllActive(self): return _pywraprouting.RoutingModel_AddAllActive(self)
    def AddDisjunction(self, *args): return _pywraprouting.RoutingModel_AddDisjunction(self, *args)
    def AddDisjunctionWithPenalty(self, *args): return _pywraprouting.RoutingModel_AddDisjunctionWithPenalty(self, *args)
    def AddPickupAndDelivery(self, *args): return _pywraprouting.RoutingModel_AddPickupAndDelivery(self, *args)
    def SetDepot(self, *args): return _pywraprouting.RoutingModel_SetDepot(self, *args)
    def SetCost(self, *args): return _pywraprouting.RoutingModel_SetCost(self, *args)
    def SetVehicleCost(self, *args): return _pywraprouting.RoutingModel_SetVehicleCost(self, *args)
    def GetRouteFixedCost(self): return _pywraprouting.RoutingModel_GetRouteFixedCost(self)
    def SetRouteFixedCost(self, *args): return _pywraprouting.RoutingModel_SetRouteFixedCost(self, *args)
    def GetVehicleFixedCost(self, *args): return _pywraprouting.RoutingModel_GetVehicleFixedCost(self, *args)
    def SetVehicleFixedCost(self, *args): return _pywraprouting.RoutingModel_SetVehicleFixedCost(self, *args)
    def first_solution_strategy(self): return _pywraprouting.RoutingModel_first_solution_strategy(self)
    def set_first_solution_strategy(self, *args): return _pywraprouting.RoutingModel_set_first_solution_strategy(self, *args)
    def SetFirstSolutionEvaluator(self, *args): return _pywraprouting.RoutingModel_SetFirstSolutionEvaluator(self, *args)
    def GetSelectedFirstSolutionStrategy(self): return _pywraprouting.RoutingModel_GetSelectedFirstSolutionStrategy(self)
    def AddLocalSearchOperator(self, *args): return _pywraprouting.RoutingModel_AddLocalSearchOperator(self, *args)
    def metaheuristic(self): return _pywraprouting.RoutingModel_metaheuristic(self)
    def set_metaheuristic(self, *args): return _pywraprouting.RoutingModel_set_metaheuristic(self, *args)
    def GetSelectedMetaheuristic(self): return _pywraprouting.RoutingModel_GetSelectedMetaheuristic(self)
    def AddSearchMonitor(self, *args): return _pywraprouting.RoutingModel_AddSearchMonitor(self, *args)
    def CloseModel(self): return _pywraprouting.RoutingModel_CloseModel(self)
    def Solve(self, assignment = None): return _pywraprouting.RoutingModel_Solve(self, assignment)
    def ComputeLowerBound(self): return _pywraprouting.RoutingModel_ComputeLowerBound(self)
    def status(self): return _pywraprouting.RoutingModel_status(self)
    def ApplyLocks(self, *args): return _pywraprouting.RoutingModel_ApplyLocks(self, *args)
    def ApplyLocksToAllVehicles(self, *args): return _pywraprouting.RoutingModel_ApplyLocksToAllVehicles(self, *args)
    def PreAssignment(self): return _pywraprouting.RoutingModel_PreAssignment(self)
    def WriteAssignment(self, *args): return _pywraprouting.RoutingModel_WriteAssignment(self, *args)
    def ReadAssignment(self, *args): return _pywraprouting.RoutingModel_ReadAssignment(self, *args)
    def RestoreAssignment(self, *args): return _pywraprouting.RoutingModel_RestoreAssignment(self, *args)
    def ReadAssignmentFromRoutes(self, *args): return _pywraprouting.RoutingModel_ReadAssignmentFromRoutes(self, *args)
    def RoutesToAssignment(self, *args): return _pywraprouting.RoutingModel_RoutesToAssignment(self, *args)
    def AssignmentToRoutes(self, *args): return _pywraprouting.RoutingModel_AssignmentToRoutes(self, *args)
    def CompactAssignment(self, *args): return _pywraprouting.RoutingModel_CompactAssignment(self, *args)
    def AddToAssignment(self, *args): return _pywraprouting.RoutingModel_AddToAssignment(self, *args)
    def Start(self, *args): return _pywraprouting.RoutingModel_Start(self, *args)
    def End(self, *args): return _pywraprouting.RoutingModel_End(self, *args)
    def IsStart(self, *args): return _pywraprouting.RoutingModel_IsStart(self, *args)
    def IsEnd(self, *args): return _pywraprouting.RoutingModel_IsEnd(self, *args)
    def GetFirstSolutionCost(self, *args): return _pywraprouting.RoutingModel_GetFirstSolutionCost(self, *args)
    def homogeneous_costs(self): return _pywraprouting.RoutingModel_homogeneous_costs(self)
    def Next(self, *args): return _pywraprouting.RoutingModel_Next(self, *args)
    def IsVehicleUsed(self, *args): return _pywraprouting.RoutingModel_IsVehicleUsed(self, *args)
    def NextVar(self, *args): return _pywraprouting.RoutingModel_NextVar(self, *args)
    def ActiveVar(self, *args): return _pywraprouting.RoutingModel_ActiveVar(self, *args)
    def VehicleVar(self, *args): return _pywraprouting.RoutingModel_VehicleVar(self, *args)
    def CumulVar(self, *args): return _pywraprouting.RoutingModel_CumulVar(self, *args)
    def TransitVar(self, *args): return _pywraprouting.RoutingModel_TransitVar(self, *args)
    def SlackVar(self, *args): return _pywraprouting.RoutingModel_SlackVar(self, *args)
    def CostVar(self): return _pywraprouting.RoutingModel_CostVar(self)
    def GetCost(self, *args): return _pywraprouting.RoutingModel_GetCost(self, *args)
    def GetHomogeneousCost(self, *args): return _pywraprouting.RoutingModel_GetHomogeneousCost(self, *args)
    def GetVehicleCostCount(self): return _pywraprouting.RoutingModel_GetVehicleCostCount(self)
    def solver(self): return _pywraprouting.RoutingModel_solver(self)
    def nodes(self): return _pywraprouting.RoutingModel_nodes(self)
    def vehicles(self): return _pywraprouting.RoutingModel_vehicles(self)
    def Size(self): return _pywraprouting.RoutingModel_Size(self)
    def IndexToNode(self, *args): return _pywraprouting.RoutingModel_IndexToNode(self, *args)
    def NodeToIndex(self, *args): return _pywraprouting.RoutingModel_NodeToIndex(self, *args)
    def GetDisjunctionIndicesFromIndex(self, *args): return _pywraprouting.RoutingModel_GetDisjunctionIndicesFromIndex(self, *args)
    def TimeLimit(self): return _pywraprouting.RoutingModel_TimeLimit(self)
    def UpdateTimeLimit(self, *args): return _pywraprouting.RoutingModel_UpdateTimeLimit(self, *args)
    def UpdateLNSTimeLimit(self, *args): return _pywraprouting.RoutingModel_UpdateLNSTimeLimit(self, *args)
    def SetCommandLineOption(self, *args): return _pywraprouting.RoutingModel_SetCommandLineOption(self, *args)
    __swig_getmethods__["RoutingStrategyName"] = lambda x: _pywraprouting.RoutingModel_RoutingStrategyName
    if _newclass:RoutingStrategyName = staticmethod(_pywraprouting.RoutingModel_RoutingStrategyName)
    __swig_getmethods__["ParseRoutingStrategy"] = lambda x: _pywraprouting.RoutingModel_ParseRoutingStrategy
    if _newclass:ParseRoutingStrategy = staticmethod(_pywraprouting.RoutingModel_ParseRoutingStrategy)
    __swig_getmethods__["RoutingMetaheuristicName"] = lambda x: _pywraprouting.RoutingModel_RoutingMetaheuristicName
    if _newclass:RoutingMetaheuristicName = staticmethod(_pywraprouting.RoutingModel_RoutingMetaheuristicName)
    __swig_getmethods__["ParseRoutingMetaheuristic"] = lambda x: _pywraprouting.RoutingModel_ParseRoutingMetaheuristic
    if _newclass:ParseRoutingMetaheuristic = staticmethod(_pywraprouting.RoutingModel_ParseRoutingMetaheuristic)
    def AddVectorDimension(self, *args): return _pywraprouting.RoutingModel_AddVectorDimension(self, *args)
RoutingModel_swigregister = _pywraprouting.RoutingModel_swigregister
RoutingModel_swigregister(RoutingModel)
RoutingModel.kFirstNode = _pywraprouting.cvar.RoutingModel_kFirstNode
RoutingModel.kInvalidNodeIndex = _pywraprouting.cvar.RoutingModel_kInvalidNodeIndex

def RoutingModel_RoutingStrategyName(*args):
  return _pywraprouting.RoutingModel_RoutingStrategyName(*args)
RoutingModel_RoutingStrategyName = _pywraprouting.RoutingModel_RoutingStrategyName

def RoutingModel_ParseRoutingStrategy(*args):
  return _pywraprouting.RoutingModel_ParseRoutingStrategy(*args)
RoutingModel_ParseRoutingStrategy = _pywraprouting.RoutingModel_ParseRoutingStrategy

def RoutingModel_RoutingMetaheuristicName(*args):
  return _pywraprouting.RoutingModel_RoutingMetaheuristicName(*args)
RoutingModel_RoutingMetaheuristicName = _pywraprouting.RoutingModel_RoutingMetaheuristicName

def RoutingModel_ParseRoutingMetaheuristic(*args):
  return _pywraprouting.RoutingModel_ParseRoutingMetaheuristic(*args)
RoutingModel_ParseRoutingMetaheuristic = _pywraprouting.RoutingModel_ParseRoutingMetaheuristic

# This file is compatible with both classic and new-style classes.


